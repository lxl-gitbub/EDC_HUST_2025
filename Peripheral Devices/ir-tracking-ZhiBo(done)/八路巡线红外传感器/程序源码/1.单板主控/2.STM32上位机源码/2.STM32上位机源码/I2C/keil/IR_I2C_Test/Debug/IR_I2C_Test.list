
IR_I2C_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003778  08003778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  080037f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080037f0  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbf0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002120  00000000  00000000  0002dc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd6  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d89e  00000000  00000000  00049cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086206  00000000  00000000  00057594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd79a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb0  00000000  00000000  000dd7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003668 	.word	0x08003668

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003668 	.word	0x08003668

0800014c <read_IRdata>:
	


//读取红外数据
static void read_IRdata(u8 *buf)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
 8000152:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c2, (0x12<<1), 0x30, I2C_MEMADD_SIZE_8BIT, buf, 1, 10);
 8000154:	230a      	movs	r3, #10
 8000156:	9302      	str	r3, [sp, #8]
 8000158:	2301      	movs	r3, #1
 800015a:	9301      	str	r3, [sp, #4]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	9300      	str	r3, [sp, #0]
 8000160:	2301      	movs	r3, #1
 8000162:	2230      	movs	r2, #48	; 0x30
 8000164:	2124      	movs	r1, #36	; 0x24
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <read_IRdata+0x28>)
 8000168:	f000 ff70 	bl	800104c <HAL_I2C_Mem_Read>
}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	20000098 	.word	0x20000098

08000178 <deal_IRdata>:
void deal_IRdata(u8 *x1,u8 *x2,u8 *x3,u8 *x4,u8 *x5,u8 *x6,u8 *x7,u8 *x8)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b086      	sub	sp, #24
 800017c:	af00      	add	r7, sp, #0
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	607a      	str	r2, [r7, #4]
 8000184:	603b      	str	r3, [r7, #0]
	u8 IRbuf = 0xFF;
 8000186:	23ff      	movs	r3, #255	; 0xff
 8000188:	75fb      	strb	r3, [r7, #23]
	read_IRdata(&IRbuf);
 800018a:	f107 0317 	add.w	r3, r7, #23
 800018e:	4618      	mov	r0, r3
 8000190:	f7ff ffdc 	bl	800014c <read_IRdata>
	
	*x1 = (IRbuf>>7)&0x01;
 8000194:	7dfb      	ldrb	r3, [r7, #23]
 8000196:	09db      	lsrs	r3, r3, #7
 8000198:	b2da      	uxtb	r2, r3
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	701a      	strb	r2, [r3, #0]
	*x2 = (IRbuf>>6)&0x01;
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	099b      	lsrs	r3, r3, #6
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	701a      	strb	r2, [r3, #0]
	*x3 = (IRbuf>>5)&0x01;
 80001ae:	7dfb      	ldrb	r3, [r7, #23]
 80001b0:	095b      	lsrs	r3, r3, #5
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	f003 0301 	and.w	r3, r3, #1
 80001b8:	b2da      	uxtb	r2, r3
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	701a      	strb	r2, [r3, #0]
	*x4 = (IRbuf>>4)&0x01;
 80001be:	7dfb      	ldrb	r3, [r7, #23]
 80001c0:	091b      	lsrs	r3, r3, #4
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	f003 0301 	and.w	r3, r3, #1
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	701a      	strb	r2, [r3, #0]
	*x5 = (IRbuf>>3)&0x01;
 80001ce:	7dfb      	ldrb	r3, [r7, #23]
 80001d0:	08db      	lsrs	r3, r3, #3
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	6a3b      	ldr	r3, [r7, #32]
 80001dc:	701a      	strb	r2, [r3, #0]
	*x6 = (IRbuf>>2)&0x01;
 80001de:	7dfb      	ldrb	r3, [r7, #23]
 80001e0:	089b      	lsrs	r3, r3, #2
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ec:	701a      	strb	r2, [r3, #0]
	*x7 = (IRbuf>>1)&0x01;
 80001ee:	7dfb      	ldrb	r3, [r7, #23]
 80001f0:	085b      	lsrs	r3, r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	f003 0301 	and.w	r3, r3, #1
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001fc:	701a      	strb	r2, [r3, #0]
	*x8 = (IRbuf>>0)&0x01;
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	f003 0301 	and.w	r3, r3, #1
 8000204:	b2da      	uxtb	r2, r3
 8000206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000208:	701a      	strb	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&USART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF); // 阻塞方式打印,串口x
 800021c:	1d39      	adds	r1, r7, #4
 800021e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000222:	2201      	movs	r2, #1
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <__io_putchar+0x20>)
 8000226:	f002 f8b9 	bl	800239c <HAL_UART_Transmit>
  return ch;
 800022a:	687b      	ldr	r3, [r7, #4]
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200000f4 	.word	0x200000f4

08000238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_GPIO_Init+0x58>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <MX_GPIO_Init+0x58>)
 8000244:	f043 0320 	orr.w	r3, r3, #32
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_GPIO_Init+0x58>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_GPIO_Init+0x58>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <MX_GPIO_Init+0x58>)
 800025c:	f043 0308 	orr.w	r3, r3, #8
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <MX_GPIO_Init+0x58>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0308 	and.w	r3, r3, #8
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <MX_GPIO_Init+0x58>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <MX_GPIO_Init+0x58>)
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <MX_GPIO_Init+0x58>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0304 	and.w	r3, r3, #4
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]

}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000

08000294 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_I2C2_Init+0x50>)
 800029a:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <MX_I2C2_Init+0x54>)
 800029c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <MX_I2C2_Init+0x58>)
 80002a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <MX_I2C2_Init+0x50>)
 80002d2:	f000 fd77 	bl	8000dc4 <HAL_I2C_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002dc:	f000 f8e5 	bl	80004aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000098 	.word	0x20000098
 80002e8:	40005800 	.word	0x40005800
 80002ec:	00061a80 	.word	0x00061a80

080002f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a16      	ldr	r2, [pc, #88]	; (8000364 <HAL_I2C_MspInit+0x74>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d124      	bne.n	800035a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <HAL_I2C_MspInit+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a14      	ldr	r2, [pc, #80]	; (8000368 <HAL_I2C_MspInit+0x78>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_I2C_MspInit+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800032c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032e:	2312      	movs	r3, #18
 8000330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	480b      	ldr	r0, [pc, #44]	; (800036c <HAL_I2C_MspInit+0x7c>)
 800033e:	f000 fbbd 	bl	8000abc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <HAL_I2C_MspInit+0x78>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <HAL_I2C_MspInit+0x78>)
 8000348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_I2C_MspInit+0x78>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40005800 	.word	0x40005800
 8000368:	40021000 	.word	0x40021000
 800036c:	40010c00 	.word	0x40010c00

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	b087      	sub	sp, #28
 8000374:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f000 fa37 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f851 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f7ff ff5b 	bl	8000238 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000382:	f7ff ff87 	bl	8000294 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000386:	f000 f993 	bl	80006b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);//等待模块稳定
 800038a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800038e:	f000 fa8d 	bl	80008ac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  deal_IRdata(&ir_x1,&ir_x2,&ir_x3,&ir_x4,&ir_x5,&ir_x6,&ir_x7,&ir_x8);
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <main+0x8c>)
 8000394:	9303      	str	r3, [sp, #12]
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <main+0x90>)
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <main+0x94>)
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <main+0x98>)
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0x9c>)
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <main+0xa0>)
 80003a6:	491b      	ldr	r1, [pc, #108]	; (8000414 <main+0xa4>)
 80003a8:	481b      	ldr	r0, [pc, #108]	; (8000418 <main+0xa8>)
 80003aa:	f7ff fee5 	bl	8000178 <deal_IRdata>
	  printf("x1:%d,x2:%d,x3:%d,x4:%d,x5:%d,x6:%d,x7:%d,x8:%d\r\n",ir_x1,ir_x2,ir_x3,ir_x4,ir_x5,ir_x6,ir_x7,ir_x8);
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <main+0xa8>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461d      	mov	r5, r3
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <main+0xa4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461e      	mov	r6, r3
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <main+0xa0>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	469c      	mov	ip, r3
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <main+0x9c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <main+0x98>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <main+0x94>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <main+0x90>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	461c      	mov	r4, r3
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <main+0x8c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	9304      	str	r3, [sp, #16]
 80003de:	9403      	str	r4, [sp, #12]
 80003e0:	9002      	str	r0, [sp, #8]
 80003e2:	9101      	str	r1, [sp, #4]
 80003e4:	9200      	str	r2, [sp, #0]
 80003e6:	4663      	mov	r3, ip
 80003e8:	4632      	mov	r2, r6
 80003ea:	4629      	mov	r1, r5
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <main+0xac>)
 80003ee:	f002 f9db 	bl	80027a8 <iprintf>
	  HAL_Delay(300);
 80003f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003f6:	f000 fa59 	bl	80008ac <HAL_Delay>
	  deal_IRdata(&ir_x1,&ir_x2,&ir_x3,&ir_x4,&ir_x5,&ir_x6,&ir_x7,&ir_x8);
 80003fa:	e7ca      	b.n	8000392 <main+0x22>
 80003fc:	200000f3 	.word	0x200000f3
 8000400:	200000ee 	.word	0x200000ee
 8000404:	200000ec 	.word	0x200000ec
 8000408:	200000ed 	.word	0x200000ed
 800040c:	200000ef 	.word	0x200000ef
 8000410:	200000f0 	.word	0x200000f0
 8000414:	200000f2 	.word	0x200000f2
 8000418:	200000f1 	.word	0x200000f1
 800041c:	08003680 	.word	0x08003680

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	; 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 f9b2 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fb39 	bl	8001ae0 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000474:	f000 f819 	bl	80004aa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fda4 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 f804 	bl	80004aa <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ae:	b672      	cpsid	i
}
 80004b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f989 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}

08000566 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e00a      	b.n	800058e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000578:	f3af 8000 	nop.w
 800057c:	4601      	mov	r1, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	60ba      	str	r2, [r7, #8]
 8000584:	b2ca      	uxtb	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	dbf0      	blt.n	8000578 <_read+0x12>
	}

return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e009      	b.n	80005c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	60ba      	str	r2, [r7, #8]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe2a 	bl	8000214 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	dbf1      	blt.n	80005b2 <_write+0x12>
	}
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_close>:

int _close(int file)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <_isatty>:

int _isatty(int file)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	return 1;
 8000614:	2301      	movs	r3, #1
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f002 f86c 	bl	8002744 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20005000 	.word	0x20005000
 8000698:	00000400 	.word	0x00000400
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	20000150 	.word	0x20000150

080006a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART1_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e8:	f001 fe08 	bl	80022fc <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f7ff feda 	bl	80004aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000f4 	.word	0x200000f4
 8000700:	40013800 	.word	0x40013800

08000704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_UART_MspInit+0x8c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d131      	bne.n	8000788 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_UART_MspInit+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <HAL_UART_MspInit+0x90>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_UART_MspInit+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_UART_MspInit+0x90>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_UART_MspInit+0x90>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_UART_MspInit+0x90>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000758:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_UART_MspInit+0x94>)
 800076a:	f000 f9a7 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_UART_MspInit+0x94>)
 8000784:	f000 f99a 	bl	8000abc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff ff82 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a2:	490c      	ldr	r1, [pc, #48]	; (80007d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b8:	4c09      	ldr	r4, [pc, #36]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f001 ffc3 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fdd1 	bl	8000370 <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007d8:	08003780 	.word	0x08003780
  ldr r2, =_sbss
 80007dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007e0:	20000150 	.word	0x20000150

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f92b 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fe56 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f935 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 f90b 	bl	8000a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000004 	.word	0x20000004

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000008 	.word	0x20000008
 8000894:	2000013c 	.word	0x2000013c

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	2000013c 	.word	0x2000013c

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff fff0 	bl	8000898 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffe0 	bl	8000898 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f7ff ff90 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff49 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff5e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff90 	bl	80009ac <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5f 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffb0 	bl	8000a10 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e169      	b.n	8000da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f040 8158 	bne.w	8000d9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a9a      	ldr	r2, [pc, #616]	; (8000d5c <HAL_GPIO_Init+0x2a0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d05e      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000af8:	4a98      	ldr	r2, [pc, #608]	; (8000d5c <HAL_GPIO_Init+0x2a0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d875      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000afe:	4a98      	ldr	r2, [pc, #608]	; (8000d60 <HAL_GPIO_Init+0x2a4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d058      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b04:	4a96      	ldr	r2, [pc, #600]	; (8000d60 <HAL_GPIO_Init+0x2a4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d86f      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b0a:	4a96      	ldr	r2, [pc, #600]	; (8000d64 <HAL_GPIO_Init+0x2a8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d052      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b10:	4a94      	ldr	r2, [pc, #592]	; (8000d64 <HAL_GPIO_Init+0x2a8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d869      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b16:	4a94      	ldr	r2, [pc, #592]	; (8000d68 <HAL_GPIO_Init+0x2ac>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d04c      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b1c:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <HAL_GPIO_Init+0x2ac>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d863      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b22:	4a92      	ldr	r2, [pc, #584]	; (8000d6c <HAL_GPIO_Init+0x2b0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d046      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b28:	4a90      	ldr	r2, [pc, #576]	; (8000d6c <HAL_GPIO_Init+0x2b0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d85d      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b2e:	2b12      	cmp	r3, #18
 8000b30:	d82a      	bhi.n	8000b88 <HAL_GPIO_Init+0xcc>
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d859      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b36:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <HAL_GPIO_Init+0x80>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000b91 	.word	0x08000b91
 8000b44:	08000ba3 	.word	0x08000ba3
 8000b48:	08000be5 	.word	0x08000be5
 8000b4c:	08000beb 	.word	0x08000beb
 8000b50:	08000beb 	.word	0x08000beb
 8000b54:	08000beb 	.word	0x08000beb
 8000b58:	08000beb 	.word	0x08000beb
 8000b5c:	08000beb 	.word	0x08000beb
 8000b60:	08000beb 	.word	0x08000beb
 8000b64:	08000beb 	.word	0x08000beb
 8000b68:	08000beb 	.word	0x08000beb
 8000b6c:	08000beb 	.word	0x08000beb
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000beb 	.word	0x08000beb
 8000b78:	08000beb 	.word	0x08000beb
 8000b7c:	08000beb 	.word	0x08000beb
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000bad 	.word	0x08000bad
 8000b88:	4a79      	ldr	r2, [pc, #484]	; (8000d70 <HAL_GPIO_Init+0x2b4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b8e:	e02c      	b.n	8000bea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e029      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	623b      	str	r3, [r7, #32]
          break;
 8000ba0:	e024      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	623b      	str	r3, [r7, #32]
          break;
 8000baa:	e01f      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	330c      	adds	r3, #12
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e01a      	b.n	8000bec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e013      	b.n	8000bec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	611a      	str	r2, [r3, #16]
          break;
 8000bd6:	e009      	b.n	8000bec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	615a      	str	r2, [r3, #20]
          break;
 8000be2:	e003      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x130>
          break;
 8000bea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d801      	bhi.n	8000bf6 <HAL_GPIO_Init+0x13a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	e001      	b.n	8000bfa <HAL_GPIO_Init+0x13e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2bff      	cmp	r3, #255	; 0xff
 8000c00:	d802      	bhi.n	8000c08 <HAL_GPIO_Init+0x14c>
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x152>
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	3b08      	subs	r3, #8
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	210f      	movs	r1, #15
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	6a39      	ldr	r1, [r7, #32]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3c:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a4c      	ldr	r2, [pc, #304]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c54:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <HAL_GPIO_Init+0x2c0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d013      	beq.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <HAL_GPIO_Init+0x2c4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a3d      	ldr	r2, [pc, #244]	; (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1e0>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cba:	492f      	ldr	r1, [pc, #188]	; (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	492c      	ldr	r1, [pc, #176]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4928      	ldr	r1, [pc, #160]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	4922      	ldr	r1, [pc, #136]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60cb      	str	r3, [r1, #12]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	491e      	ldr	r1, [pc, #120]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4918      	ldr	r1, [pc, #96]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4914      	ldr	r1, [pc, #80]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d021      	beq.n	8000d90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	490e      	ldr	r1, [pc, #56]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e021      	b.n	8000d9e <HAL_GPIO_Init+0x2e2>
 8000d5a:	bf00      	nop
 8000d5c:	10320000 	.word	0x10320000
 8000d60:	10310000 	.word	0x10310000
 8000d64:	10220000 	.word	0x10220000
 8000d68:	10210000 	.word	0x10210000
 8000d6c:	10120000 	.word	0x10120000
 8000d70:	10110000 	.word	0x10110000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40011400 	.word	0x40011400
 8000d8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_GPIO_Init+0x304>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4909      	ldr	r1, [pc, #36]	; (8000dc0 <HAL_GPIO_Init+0x304>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	3301      	adds	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f ae8e 	bne.w	8000ad0 <HAL_GPIO_Init+0x14>
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	372c      	adds	r7, #44	; 0x2c
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e12b      	b.n	800102e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fa80 	bl	80002f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e28:	f001 fa22 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a81      	ldr	r2, [pc, #516]	; (8001038 <HAL_I2C_Init+0x274>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d807      	bhi.n	8000e48 <HAL_I2C_Init+0x84>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4a80      	ldr	r2, [pc, #512]	; (800103c <HAL_I2C_Init+0x278>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	bf94      	ite	ls
 8000e40:	2301      	movls	r3, #1
 8000e42:	2300      	movhi	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	e006      	b.n	8000e56 <HAL_I2C_Init+0x92>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4a7d      	ldr	r2, [pc, #500]	; (8001040 <HAL_I2C_Init+0x27c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	bf94      	ite	ls
 8000e50:	2301      	movls	r3, #1
 8000e52:	2300      	movhi	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e0e7      	b.n	800102e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4a78      	ldr	r2, [pc, #480]	; (8001044 <HAL_I2C_Init+0x280>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0c9b      	lsrs	r3, r3, #18
 8000e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a6a      	ldr	r2, [pc, #424]	; (8001038 <HAL_I2C_Init+0x274>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d802      	bhi.n	8000e98 <HAL_I2C_Init+0xd4>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3301      	adds	r3, #1
 8000e96:	e009      	b.n	8000eac <HAL_I2C_Init+0xe8>
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_I2C_Init+0x284>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	3301      	adds	r3, #1
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	495c      	ldr	r1, [pc, #368]	; (8001038 <HAL_I2C_Init+0x274>)
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d819      	bhi.n	8000f00 <HAL_I2C_Init+0x13c>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1e59      	subs	r1, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eda:	1c59      	adds	r1, r3, #1
 8000edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00a      	beq.n	8000efc <HAL_I2C_Init+0x138>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1e59      	subs	r1, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efa:	e051      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e04f      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_I2C_Init+0x168>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1e58      	subs	r0, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	440b      	add	r3, r1
 8000f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	e012      	b.n	8000f52 <HAL_I2C_Init+0x18e>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1e58      	subs	r0, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	0099      	lsls	r1, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_Init+0x196>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e022      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10e      	bne.n	8000f80 <HAL_I2C_Init+0x1bc>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1e58      	subs	r0, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6859      	ldr	r1, [r3, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	440b      	add	r3, r1
 8000f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	e00f      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	0099      	lsls	r1, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	6809      	ldr	r1, [r1, #0]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69da      	ldr	r2, [r3, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6911      	ldr	r1, [r2, #16]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68d2      	ldr	r2, [r2, #12]
 8000fda:	4311      	orrs	r1, r2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	000186a0 	.word	0x000186a0
 800103c:	001e847f 	.word	0x001e847f
 8001040:	003d08ff 	.word	0x003d08ff
 8001044:	431bde83 	.word	0x431bde83
 8001048:	10624dd3 	.word	0x10624dd3

0800104c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	817b      	strh	r3, [r7, #10]
 800105e:	460b      	mov	r3, r1
 8001060:	813b      	strh	r3, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800106a:	f7ff fc15 	bl	8000898 <HAL_GetTick>
 800106e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	f040 8250 	bne.w	800151e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2319      	movs	r3, #25
 8001084:	2201      	movs	r2, #1
 8001086:	4982      	ldr	r1, [pc, #520]	; (8001290 <HAL_I2C_Mem_Read+0x244>)
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 fb3b 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001094:	2302      	movs	r3, #2
 8001096:	e243      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_Mem_Read+0x5a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e23c      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d007      	beq.n	80010cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2222      	movs	r2, #34	; 0x22
 80010e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001102:	b29a      	uxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <HAL_I2C_Mem_Read+0x248>)
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800110e:	88f8      	ldrh	r0, [r7, #6]
 8001110:	893a      	ldrh	r2, [r7, #8]
 8001112:	8979      	ldrh	r1, [r7, #10]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4603      	mov	r3, r0
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 fa08 	bl	8001534 <I2C_RequestMemoryRead>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1f8      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001132:	2b00      	cmp	r3, #0
 8001134:	d113      	bne.n	800115e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e1cc      	b.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11e      	bne.n	80011a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001176:	b672      	cpsid	i
}
 8001178:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011a0:	b662      	cpsie	i
}
 80011a2:	e035      	b.n	8001210 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d11e      	bne.n	80011ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011e6:	b662      	cpsie	i
}
 80011e8:	e012      	b.n	8001210 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001210:	e172      	b.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001216:	2b03      	cmp	r3, #3
 8001218:	f200 811f 	bhi.w	800145a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	2b01      	cmp	r3, #1
 8001222:	d123      	bne.n	800126c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fbcd 	bl	80019c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e173      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001254:	3b01      	subs	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800126a:	e145      	b.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001270:	2b02      	cmp	r3, #2
 8001272:	d152      	bne.n	800131a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127a:	2200      	movs	r2, #0
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <HAL_I2C_Mem_Read+0x24c>)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 fa40 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e148      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
 800128e:	bf00      	nop
 8001290:	00100002 	.word	0x00100002
 8001294:	ffff0000 	.word	0xffff0000
 8001298:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80012e2:	b662      	cpsie	i
}
 80012e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001318:	e0ee      	b.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001320:	2200      	movs	r2, #0
 8001322:	4981      	ldr	r1, [pc, #516]	; (8001528 <HAL_I2C_Mem_Read+0x4dc>)
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f9ed 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0f5      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b01      	subs	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800137a:	4b6c      	ldr	r3, [pc, #432]	; (800152c <HAL_I2C_Mem_Read+0x4e0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	4a6b      	ldr	r2, [pc, #428]	; (8001530 <HAL_I2C_Mem_Read+0x4e4>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0a1a      	lsrs	r2, r3, #8
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00da      	lsls	r2, r3, #3
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	3b01      	subs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d118      	bne.n	80013d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f043 0220 	orr.w	r2, r3, #32
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0a6      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d1d9      	bne.n	8001394 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140c:	3b01      	subs	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001422:	b662      	cpsie	i
}
 8001424:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144e:	b29b      	uxth	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001458:	e04e      	b.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fab2 	bl	80019c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e058      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d124      	bne.n	80014f8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f47f ae88 	bne.w	8001212 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800151e:	2302      	movs	r3, #2
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	00010004 	.word	0x00010004
 800152c:	20000000 	.word	0x20000000
 8001530:	14f8b589 	.word	0x14f8b589

08001534 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4603      	mov	r3, r0
 8001544:	817b      	strh	r3, [r7, #10]
 8001546:	460b      	mov	r3, r1
 8001548:	813b      	strh	r3, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800155c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800156c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2200      	movs	r2, #0
 8001576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f8c2 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001594:	d103      	bne.n	800159e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0aa      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	6a3a      	ldr	r2, [r7, #32]
 80015b6:	4952      	ldr	r1, [pc, #328]	; (8001700 <I2C_RequestMemoryRead+0x1cc>)
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f91d 	bl	80017f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e097      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f9a8 	bl	8001938 <I2C_WaitOnTXEFlagUntilTimeout>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00d      	beq.n	800160a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d107      	bne.n	8001606 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e076      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	e021      	b.n	8001660 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	b2da      	uxtb	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f982 	bl	8001938 <I2C_WaitOnTXEFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b04      	cmp	r3, #4
 8001640:	d107      	bne.n	8001652 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e050      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001656:	893b      	ldrh	r3, [r7, #8]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	6a39      	ldr	r1, [r7, #32]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f967 	bl	8001938 <I2C_WaitOnTXEFlagUntilTimeout>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00d      	beq.n	800168c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2b04      	cmp	r3, #4
 8001676:	d107      	bne.n	8001688 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001686:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e035      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 f82b 	bl	8001704 <I2C_WaitOnFlagUntilTimeout>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c2:	d103      	bne.n	80016cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e013      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016d0:	897b      	ldrh	r3, [r7, #10]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	6a3a      	ldr	r2, [r7, #32]
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <I2C_RequestMemoryRead+0x1cc>)
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f886 	bl	80017f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	00010002 	.word	0x00010002

08001704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001714:	e048      	b.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d044      	beq.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171e:	f7ff f8bb 	bl	8000898 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d302      	bcc.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d139      	bne.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d10d      	bne.n	800175a <I2C_WaitOnFlagUntilTimeout+0x56>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	43da      	mvns	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4013      	ands	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	e00c      	b.n	8001774 <I2C_WaitOnFlagUntilTimeout+0x70>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	43da      	mvns	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4013      	ands	r3, r2
 8001766:	b29b      	uxth	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	429a      	cmp	r2, r3
 8001778:	d116      	bne.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f043 0220 	orr.w	r2, r3, #32
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e023      	b.n	80017f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10d      	bne.n	80017ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4013      	ands	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	e00c      	b.n	80017e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	43da      	mvns	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4013      	ands	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d093      	beq.n	8001716 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001806:	e071      	b.n	80018ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d123      	bne.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001826:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0204 	orr.w	r2, r3, #4
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e067      	b.n	8001930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d041      	beq.n	80018ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff f816 	bl	8000898 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d136      	bne.n	80018ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10c      	bne.n	80018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4013      	ands	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	e00b      	b.n	80018ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4013      	ands	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e021      	b.n	8001930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10c      	bne.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4013      	ands	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e00b      	b.n	8001928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4013      	ands	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f af6d 	bne.w	8001808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001944:	e034      	b.n	80019b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f89b 	bl	8001a82 <I2C_IsAcknowledgeFailed>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e034      	b.n	80019c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d028      	beq.n	80019b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195e:	f7fe ff9b 	bl	8000898 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	429a      	cmp	r2, r3
 800196c:	d302      	bcc.n	8001974 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11d      	bne.n	80019b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b80      	cmp	r3, #128	; 0x80
 8001980:	d016      	beq.n	80019b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e007      	b.n	80019c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d1c3      	bne.n	8001946 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019d4:	e049      	b.n	8001a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b10      	cmp	r3, #16
 80019e2:	d119      	bne.n	8001a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0210 	mvn.w	r2, #16
 80019ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e030      	b.n	8001a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a18:	f7fe ff3e 	bl	8000898 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d302      	bcc.n	8001a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11d      	bne.n	8001a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d016      	beq.n	8001a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e007      	b.n	8001a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	2b40      	cmp	r3, #64	; 0x40
 8001a76:	d1ae      	bne.n	80019d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d11b      	bne.n	8001ad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e26c      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d112      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x12c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d168      	bne.n	8001c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e246      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b48:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xbc>
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a67      	ldr	r2, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fe6c 	bl	8000898 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7fe fe68 	bl	8000898 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1fa      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe4>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fe58 	bl	8000898 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7fe fe54 	bl	8000898 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1e6      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x10c>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1ba      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4939      	ldr	r1, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fe0d 	bl	8000898 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7fe fe09 	bl	8000898 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e19b      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4927      	ldr	r1, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fdec 	bl	8000898 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7fe fde8 	bl	8000898 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e17a      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fdcc 	bl	8000898 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7fe fdc8 	bl	8000898 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e15a      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 facc 	bl	80022c0 <RCC_Delay>
 8001d28:	e01c      	b.n	8001d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7fe fdb2 	bl	8000898 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7fe fdae 	bl	8000898 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e140      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	42420000 	.word	0x42420000
 8001d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b9e      	ldr	r3, [pc, #632]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e9      	bne.n	8001d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a6 	beq.w	8001ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b97      	ldr	r3, [pc, #604]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a93      	ldr	r2, [pc, #588]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a8a      	ldr	r2, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7fe fd6f 	bl	8000898 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7fe fd6b 	bl	8000898 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0fd      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	e01c      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x356>
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a6c      	ldr	r2, [pc, #432]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a63      	ldr	r2, [pc, #396]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fd1f 	bl	8000898 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fd1b 	bl	8000898 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0ab      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ee      	beq.n	8001e5e <HAL_RCC_OscConfig+0x37e>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fd09 	bl	8000898 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fd05 	bl	8000898 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e095      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8081 	beq.w	8001fca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d061      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d146      	bne.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fcd9 	bl	8000898 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fcd5 	bl	8000898 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e067      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	492d      	ldr	r1, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a19      	ldr	r1, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	430b      	orrs	r3, r1
 8001f36:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fca9 	bl	8000898 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fca5 	bl	8000898 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e037      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
 8001f68:	e02f      	b.n	8001fca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x4fc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fc92 	bl	8000898 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fc8e 	bl	8000898 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e020      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x498>
 8001f96:	e018      	b.n	8001fca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e013      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42420060 	.word	0x42420060

08001fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0d0      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4965      	ldr	r1, [pc, #404]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0b8      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	494d      	ldr	r1, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d040      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e073      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06b      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fbe2 	bl	8000898 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fbde 	bl	8000898 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e053      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d210      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4922      	ldr	r1, [pc, #136]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e032      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216e:	f000 f821 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490a      	ldr	r1, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1cc>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1d0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fb40 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	080036b4 	.word	0x080036b4
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x30>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x36>
 80021e2:	e027      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	613b      	str	r3, [r7, #16]
      break;
 80021e8:	e027      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0c5b      	lsrs	r3, r3, #17
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	693b      	ldr	r3, [r7, #16]
}
 800223c:	4618      	mov	r0, r3
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200
 8002250:	080036cc 	.word	0x080036cc
 8002254:	080036dc 	.word	0x080036dc
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	080036c4 	.word	0x080036c4

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080036c4 	.word	0x080036c4

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000000 	.word	0x20000000
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e042      	b.n	8002394 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f9ee 	bl	8000704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f971 	bl	8002628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d175      	bne.n	80024a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_UART_Transmit+0x2c>
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e06e      	b.n	80024aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2221      	movs	r2, #33	; 0x21
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023da:	f7fe fa5d 	bl	8000898 <HAL_GetTick>
 80023de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f4:	d108      	bne.n	8002408 <HAL_UART_Transmit+0x6c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d104      	bne.n	8002408 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e003      	b.n	8002410 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002410:	e02e      	b.n	8002470 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f848 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03a      	b.n	80024aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	3302      	adds	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e007      	b.n	8002462 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	3301      	adds	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1cb      	bne.n	8002412 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	2140      	movs	r1, #64	; 0x40
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f814 	bl	80024b2 <UART_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c2:	e03b      	b.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d037      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe f9e4 	bl	8000898 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	6a3a      	ldr	r2, [r7, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e03a      	b.n	800255c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d023      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b80      	cmp	r3, #128	; 0x80
 80024f8:	d020      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d01d      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d116      	bne.n	800253c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f81d 	bl	8002564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2208      	movs	r2, #8
 800252e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00f      	b.n	800255c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d0b4      	beq.n	80024c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002564:	b480      	push	{r7}
 8002566:	b095      	sub	sp, #84	; 0x54
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	e853 3f00 	ldrex	r3, [r3]
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800258c:	643a      	str	r2, [r7, #64]	; 0x40
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e5      	bne.n	800256c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3314      	adds	r3, #20
 80025be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e5      	bne.n	80025a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d119      	bne.n	8002610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f023 0310 	bic.w	r3, r3, #16
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025fc:	61ba      	str	r2, [r7, #24]
 80025fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6979      	ldr	r1, [r7, #20]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	613b      	str	r3, [r7, #16]
   return(result);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261e:	bf00      	nop
 8002620:	3754      	adds	r7, #84	; 0x54
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002662:	f023 030c 	bic.w	r3, r3, #12
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <UART_SetConfig+0x114>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002690:	f7ff fe02 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	e002      	b.n	800269e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002698:	f7ff fdea 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009a      	lsls	r2, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <UART_SetConfig+0x118>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	0119      	lsls	r1, r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <UART_SetConfig+0x118>)
 80026d6:	fba3 0302 	umull	r0, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2064      	movs	r0, #100	; 0x64
 80026de:	fb00 f303 	mul.w	r3, r0, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	3332      	adds	r3, #50	; 0x32
 80026e8:	4a15      	ldr	r2, [pc, #84]	; (8002740 <UART_SetConfig+0x118>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	4419      	add	r1, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fbb2 f2f3 	udiv	r2, r2, r3
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <UART_SetConfig+0x118>)
 800270e:	fba3 0302 	umull	r0, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	3332      	adds	r3, #50	; 0x32
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <UART_SetConfig+0x118>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	440a      	add	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40013800 	.word	0x40013800
 8002740:	51eb851f 	.word	0x51eb851f

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	; (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	2000000c 	.word	0x2000000c

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	; (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	; (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 ff82 	bl	8003668 <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	; (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	08003778 	.word	0x08003778
 800278c:	08003778 	.word	0x08003778
 8002790:	08003778 	.word	0x08003778
 8002794:	0800377c 	.word	0x0800377c

08002798 <memset>:
 8002798:	4603      	mov	r3, r0
 800279a:	4402      	add	r2, r0
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	f803 1b01 	strb.w	r1, [r3], #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <iprintf>:
 80027a8:	b40f      	push	{r0, r1, r2, r3}
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <iprintf+0x2c>)
 80027ac:	b513      	push	{r0, r1, r4, lr}
 80027ae:	681c      	ldr	r4, [r3, #0]
 80027b0:	b124      	cbz	r4, 80027bc <iprintf+0x14>
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	b913      	cbnz	r3, 80027bc <iprintf+0x14>
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 f866 	bl	8002888 <__sinit>
 80027bc:	ab05      	add	r3, sp, #20
 80027be:	4620      	mov	r0, r4
 80027c0:	9a04      	ldr	r2, [sp, #16]
 80027c2:	68a1      	ldr	r1, [r4, #8]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	f000 f981 	bl	8002acc <_vfiprintf_r>
 80027ca:	b002      	add	sp, #8
 80027cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d0:	b004      	add	sp, #16
 80027d2:	4770      	bx	lr
 80027d4:	2000000c 	.word	0x2000000c

080027d8 <std>:
 80027d8:	2300      	movs	r3, #0
 80027da:	b510      	push	{r4, lr}
 80027dc:	4604      	mov	r4, r0
 80027de:	e9c0 3300 	strd	r3, r3, [r0]
 80027e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027e6:	6083      	str	r3, [r0, #8]
 80027e8:	8181      	strh	r1, [r0, #12]
 80027ea:	6643      	str	r3, [r0, #100]	; 0x64
 80027ec:	81c2      	strh	r2, [r0, #14]
 80027ee:	6183      	str	r3, [r0, #24]
 80027f0:	4619      	mov	r1, r3
 80027f2:	2208      	movs	r2, #8
 80027f4:	305c      	adds	r0, #92	; 0x5c
 80027f6:	f7ff ffcf 	bl	8002798 <memset>
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <std+0x38>)
 80027fc:	6224      	str	r4, [r4, #32]
 80027fe:	6263      	str	r3, [r4, #36]	; 0x24
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <std+0x3c>)
 8002802:	62a3      	str	r3, [r4, #40]	; 0x28
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <std+0x40>)
 8002806:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <std+0x44>)
 800280a:	6323      	str	r3, [r4, #48]	; 0x30
 800280c:	bd10      	pop	{r4, pc}
 800280e:	bf00      	nop
 8002810:	08003079 	.word	0x08003079
 8002814:	0800309b 	.word	0x0800309b
 8002818:	080030d3 	.word	0x080030d3
 800281c:	080030f7 	.word	0x080030f7

08002820 <_cleanup_r>:
 8002820:	4901      	ldr	r1, [pc, #4]	; (8002828 <_cleanup_r+0x8>)
 8002822:	f000 b8af 	b.w	8002984 <_fwalk_reent>
 8002826:	bf00      	nop
 8002828:	080033d1 	.word	0x080033d1

0800282c <__sfmoreglue>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	2568      	movs	r5, #104	; 0x68
 8002830:	1e4a      	subs	r2, r1, #1
 8002832:	4355      	muls	r5, r2
 8002834:	460e      	mov	r6, r1
 8002836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800283a:	f000 f8c5 	bl	80029c8 <_malloc_r>
 800283e:	4604      	mov	r4, r0
 8002840:	b140      	cbz	r0, 8002854 <__sfmoreglue+0x28>
 8002842:	2100      	movs	r1, #0
 8002844:	e9c0 1600 	strd	r1, r6, [r0]
 8002848:	300c      	adds	r0, #12
 800284a:	60a0      	str	r0, [r4, #8]
 800284c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002850:	f7ff ffa2 	bl	8002798 <memset>
 8002854:	4620      	mov	r0, r4
 8002856:	bd70      	pop	{r4, r5, r6, pc}

08002858 <__sfp_lock_acquire>:
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <__sfp_lock_acquire+0x8>)
 800285a:	f000 b8b3 	b.w	80029c4 <__retarget_lock_acquire_recursive>
 800285e:	bf00      	nop
 8002860:	20000148 	.word	0x20000148

08002864 <__sfp_lock_release>:
 8002864:	4801      	ldr	r0, [pc, #4]	; (800286c <__sfp_lock_release+0x8>)
 8002866:	f000 b8ae 	b.w	80029c6 <__retarget_lock_release_recursive>
 800286a:	bf00      	nop
 800286c:	20000148 	.word	0x20000148

08002870 <__sinit_lock_acquire>:
 8002870:	4801      	ldr	r0, [pc, #4]	; (8002878 <__sinit_lock_acquire+0x8>)
 8002872:	f000 b8a7 	b.w	80029c4 <__retarget_lock_acquire_recursive>
 8002876:	bf00      	nop
 8002878:	20000143 	.word	0x20000143

0800287c <__sinit_lock_release>:
 800287c:	4801      	ldr	r0, [pc, #4]	; (8002884 <__sinit_lock_release+0x8>)
 800287e:	f000 b8a2 	b.w	80029c6 <__retarget_lock_release_recursive>
 8002882:	bf00      	nop
 8002884:	20000143 	.word	0x20000143

08002888 <__sinit>:
 8002888:	b510      	push	{r4, lr}
 800288a:	4604      	mov	r4, r0
 800288c:	f7ff fff0 	bl	8002870 <__sinit_lock_acquire>
 8002890:	69a3      	ldr	r3, [r4, #24]
 8002892:	b11b      	cbz	r3, 800289c <__sinit+0x14>
 8002894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002898:	f7ff bff0 	b.w	800287c <__sinit_lock_release>
 800289c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028a0:	6523      	str	r3, [r4, #80]	; 0x50
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <__sinit+0x68>)
 80028a4:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <__sinit+0x6c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80028aa:	42a3      	cmp	r3, r4
 80028ac:	bf08      	it	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	4620      	mov	r0, r4
 80028b2:	bf08      	it	eq
 80028b4:	61a3      	streq	r3, [r4, #24]
 80028b6:	f000 f81f 	bl	80028f8 <__sfp>
 80028ba:	6060      	str	r0, [r4, #4]
 80028bc:	4620      	mov	r0, r4
 80028be:	f000 f81b 	bl	80028f8 <__sfp>
 80028c2:	60a0      	str	r0, [r4, #8]
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 f817 	bl	80028f8 <__sfp>
 80028ca:	2200      	movs	r2, #0
 80028cc:	2104      	movs	r1, #4
 80028ce:	60e0      	str	r0, [r4, #12]
 80028d0:	6860      	ldr	r0, [r4, #4]
 80028d2:	f7ff ff81 	bl	80027d8 <std>
 80028d6:	2201      	movs	r2, #1
 80028d8:	2109      	movs	r1, #9
 80028da:	68a0      	ldr	r0, [r4, #8]
 80028dc:	f7ff ff7c 	bl	80027d8 <std>
 80028e0:	2202      	movs	r2, #2
 80028e2:	2112      	movs	r1, #18
 80028e4:	68e0      	ldr	r0, [r4, #12]
 80028e6:	f7ff ff77 	bl	80027d8 <std>
 80028ea:	2301      	movs	r3, #1
 80028ec:	61a3      	str	r3, [r4, #24]
 80028ee:	e7d1      	b.n	8002894 <__sinit+0xc>
 80028f0:	080036e0 	.word	0x080036e0
 80028f4:	08002821 	.word	0x08002821

080028f8 <__sfp>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	4607      	mov	r7, r0
 80028fc:	f7ff ffac 	bl	8002858 <__sfp_lock_acquire>
 8002900:	4b1e      	ldr	r3, [pc, #120]	; (800297c <__sfp+0x84>)
 8002902:	681e      	ldr	r6, [r3, #0]
 8002904:	69b3      	ldr	r3, [r6, #24]
 8002906:	b913      	cbnz	r3, 800290e <__sfp+0x16>
 8002908:	4630      	mov	r0, r6
 800290a:	f7ff ffbd 	bl	8002888 <__sinit>
 800290e:	3648      	adds	r6, #72	; 0x48
 8002910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002914:	3b01      	subs	r3, #1
 8002916:	d503      	bpl.n	8002920 <__sfp+0x28>
 8002918:	6833      	ldr	r3, [r6, #0]
 800291a:	b30b      	cbz	r3, 8002960 <__sfp+0x68>
 800291c:	6836      	ldr	r6, [r6, #0]
 800291e:	e7f7      	b.n	8002910 <__sfp+0x18>
 8002920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002924:	b9d5      	cbnz	r5, 800295c <__sfp+0x64>
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <__sfp+0x88>)
 8002928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800292c:	60e3      	str	r3, [r4, #12]
 800292e:	6665      	str	r5, [r4, #100]	; 0x64
 8002930:	f000 f847 	bl	80029c2 <__retarget_lock_init_recursive>
 8002934:	f7ff ff96 	bl	8002864 <__sfp_lock_release>
 8002938:	2208      	movs	r2, #8
 800293a:	4629      	mov	r1, r5
 800293c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002944:	6025      	str	r5, [r4, #0]
 8002946:	61a5      	str	r5, [r4, #24]
 8002948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800294c:	f7ff ff24 	bl	8002798 <memset>
 8002950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002958:	4620      	mov	r0, r4
 800295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295c:	3468      	adds	r4, #104	; 0x68
 800295e:	e7d9      	b.n	8002914 <__sfp+0x1c>
 8002960:	2104      	movs	r1, #4
 8002962:	4638      	mov	r0, r7
 8002964:	f7ff ff62 	bl	800282c <__sfmoreglue>
 8002968:	4604      	mov	r4, r0
 800296a:	6030      	str	r0, [r6, #0]
 800296c:	2800      	cmp	r0, #0
 800296e:	d1d5      	bne.n	800291c <__sfp+0x24>
 8002970:	f7ff ff78 	bl	8002864 <__sfp_lock_release>
 8002974:	230c      	movs	r3, #12
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	e7ee      	b.n	8002958 <__sfp+0x60>
 800297a:	bf00      	nop
 800297c:	080036e0 	.word	0x080036e0
 8002980:	ffff0001 	.word	0xffff0001

08002984 <_fwalk_reent>:
 8002984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002988:	4606      	mov	r6, r0
 800298a:	4688      	mov	r8, r1
 800298c:	2700      	movs	r7, #0
 800298e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002996:	f1b9 0901 	subs.w	r9, r9, #1
 800299a:	d505      	bpl.n	80029a8 <_fwalk_reent+0x24>
 800299c:	6824      	ldr	r4, [r4, #0]
 800299e:	2c00      	cmp	r4, #0
 80029a0:	d1f7      	bne.n	8002992 <_fwalk_reent+0xe>
 80029a2:	4638      	mov	r0, r7
 80029a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029a8:	89ab      	ldrh	r3, [r5, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d907      	bls.n	80029be <_fwalk_reent+0x3a>
 80029ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029b2:	3301      	adds	r3, #1
 80029b4:	d003      	beq.n	80029be <_fwalk_reent+0x3a>
 80029b6:	4629      	mov	r1, r5
 80029b8:	4630      	mov	r0, r6
 80029ba:	47c0      	blx	r8
 80029bc:	4307      	orrs	r7, r0
 80029be:	3568      	adds	r5, #104	; 0x68
 80029c0:	e7e9      	b.n	8002996 <_fwalk_reent+0x12>

080029c2 <__retarget_lock_init_recursive>:
 80029c2:	4770      	bx	lr

080029c4 <__retarget_lock_acquire_recursive>:
 80029c4:	4770      	bx	lr

080029c6 <__retarget_lock_release_recursive>:
 80029c6:	4770      	bx	lr

080029c8 <_malloc_r>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	1ccd      	adds	r5, r1, #3
 80029cc:	f025 0503 	bic.w	r5, r5, #3
 80029d0:	3508      	adds	r5, #8
 80029d2:	2d0c      	cmp	r5, #12
 80029d4:	bf38      	it	cc
 80029d6:	250c      	movcc	r5, #12
 80029d8:	2d00      	cmp	r5, #0
 80029da:	4606      	mov	r6, r0
 80029dc:	db01      	blt.n	80029e2 <_malloc_r+0x1a>
 80029de:	42a9      	cmp	r1, r5
 80029e0:	d903      	bls.n	80029ea <_malloc_r+0x22>
 80029e2:	230c      	movs	r3, #12
 80029e4:	6033      	str	r3, [r6, #0]
 80029e6:	2000      	movs	r0, #0
 80029e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ea:	f000 fdb1 	bl	8003550 <__malloc_lock>
 80029ee:	4921      	ldr	r1, [pc, #132]	; (8002a74 <_malloc_r+0xac>)
 80029f0:	680a      	ldr	r2, [r1, #0]
 80029f2:	4614      	mov	r4, r2
 80029f4:	b99c      	cbnz	r4, 8002a1e <_malloc_r+0x56>
 80029f6:	4f20      	ldr	r7, [pc, #128]	; (8002a78 <_malloc_r+0xb0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b923      	cbnz	r3, 8002a06 <_malloc_r+0x3e>
 80029fc:	4621      	mov	r1, r4
 80029fe:	4630      	mov	r0, r6
 8002a00:	f000 fb2a 	bl	8003058 <_sbrk_r>
 8002a04:	6038      	str	r0, [r7, #0]
 8002a06:	4629      	mov	r1, r5
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f000 fb25 	bl	8003058 <_sbrk_r>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d123      	bne.n	8002a5a <_malloc_r+0x92>
 8002a12:	230c      	movs	r3, #12
 8002a14:	4630      	mov	r0, r6
 8002a16:	6033      	str	r3, [r6, #0]
 8002a18:	f000 fda0 	bl	800355c <__malloc_unlock>
 8002a1c:	e7e3      	b.n	80029e6 <_malloc_r+0x1e>
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	1b5b      	subs	r3, r3, r5
 8002a22:	d417      	bmi.n	8002a54 <_malloc_r+0x8c>
 8002a24:	2b0b      	cmp	r3, #11
 8002a26:	d903      	bls.n	8002a30 <_malloc_r+0x68>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	441c      	add	r4, r3
 8002a2c:	6025      	str	r5, [r4, #0]
 8002a2e:	e004      	b.n	8002a3a <_malloc_r+0x72>
 8002a30:	6863      	ldr	r3, [r4, #4]
 8002a32:	42a2      	cmp	r2, r4
 8002a34:	bf0c      	ite	eq
 8002a36:	600b      	streq	r3, [r1, #0]
 8002a38:	6053      	strne	r3, [r2, #4]
 8002a3a:	4630      	mov	r0, r6
 8002a3c:	f000 fd8e 	bl	800355c <__malloc_unlock>
 8002a40:	f104 000b 	add.w	r0, r4, #11
 8002a44:	1d23      	adds	r3, r4, #4
 8002a46:	f020 0007 	bic.w	r0, r0, #7
 8002a4a:	1ac2      	subs	r2, r0, r3
 8002a4c:	d0cc      	beq.n	80029e8 <_malloc_r+0x20>
 8002a4e:	1a1b      	subs	r3, r3, r0
 8002a50:	50a3      	str	r3, [r4, r2]
 8002a52:	e7c9      	b.n	80029e8 <_malloc_r+0x20>
 8002a54:	4622      	mov	r2, r4
 8002a56:	6864      	ldr	r4, [r4, #4]
 8002a58:	e7cc      	b.n	80029f4 <_malloc_r+0x2c>
 8002a5a:	1cc4      	adds	r4, r0, #3
 8002a5c:	f024 0403 	bic.w	r4, r4, #3
 8002a60:	42a0      	cmp	r0, r4
 8002a62:	d0e3      	beq.n	8002a2c <_malloc_r+0x64>
 8002a64:	1a21      	subs	r1, r4, r0
 8002a66:	4630      	mov	r0, r6
 8002a68:	f000 faf6 	bl	8003058 <_sbrk_r>
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d1dd      	bne.n	8002a2c <_malloc_r+0x64>
 8002a70:	e7cf      	b.n	8002a12 <_malloc_r+0x4a>
 8002a72:	bf00      	nop
 8002a74:	20000090 	.word	0x20000090
 8002a78:	20000094 	.word	0x20000094

08002a7c <__sfputc_r>:
 8002a7c:	6893      	ldr	r3, [r2, #8]
 8002a7e:	b410      	push	{r4}
 8002a80:	3b01      	subs	r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	6093      	str	r3, [r2, #8]
 8002a86:	da07      	bge.n	8002a98 <__sfputc_r+0x1c>
 8002a88:	6994      	ldr	r4, [r2, #24]
 8002a8a:	42a3      	cmp	r3, r4
 8002a8c:	db01      	blt.n	8002a92 <__sfputc_r+0x16>
 8002a8e:	290a      	cmp	r1, #10
 8002a90:	d102      	bne.n	8002a98 <__sfputc_r+0x1c>
 8002a92:	bc10      	pop	{r4}
 8002a94:	f000 bb34 	b.w	8003100 <__swbuf_r>
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	1c58      	adds	r0, r3, #1
 8002a9c:	6010      	str	r0, [r2, #0]
 8002a9e:	7019      	strb	r1, [r3, #0]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	bc10      	pop	{r4}
 8002aa4:	4770      	bx	lr

08002aa6 <__sfputs_r>:
 8002aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa8:	4606      	mov	r6, r0
 8002aaa:	460f      	mov	r7, r1
 8002aac:	4614      	mov	r4, r2
 8002aae:	18d5      	adds	r5, r2, r3
 8002ab0:	42ac      	cmp	r4, r5
 8002ab2:	d101      	bne.n	8002ab8 <__sfputs_r+0x12>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	e007      	b.n	8002ac8 <__sfputs_r+0x22>
 8002ab8:	463a      	mov	r2, r7
 8002aba:	4630      	mov	r0, r6
 8002abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac0:	f7ff ffdc 	bl	8002a7c <__sfputc_r>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d1f3      	bne.n	8002ab0 <__sfputs_r+0xa>
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002acc <_vfiprintf_r>:
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	4698      	mov	r8, r3
 8002ad6:	4606      	mov	r6, r0
 8002ad8:	b09d      	sub	sp, #116	; 0x74
 8002ada:	b118      	cbz	r0, 8002ae4 <_vfiprintf_r+0x18>
 8002adc:	6983      	ldr	r3, [r0, #24]
 8002ade:	b90b      	cbnz	r3, 8002ae4 <_vfiprintf_r+0x18>
 8002ae0:	f7ff fed2 	bl	8002888 <__sinit>
 8002ae4:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <_vfiprintf_r+0x240>)
 8002ae6:	429d      	cmp	r5, r3
 8002ae8:	d11b      	bne.n	8002b22 <_vfiprintf_r+0x56>
 8002aea:	6875      	ldr	r5, [r6, #4]
 8002aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002aee:	07d9      	lsls	r1, r3, #31
 8002af0:	d405      	bmi.n	8002afe <_vfiprintf_r+0x32>
 8002af2:	89ab      	ldrh	r3, [r5, #12]
 8002af4:	059a      	lsls	r2, r3, #22
 8002af6:	d402      	bmi.n	8002afe <_vfiprintf_r+0x32>
 8002af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002afa:	f7ff ff63 	bl	80029c4 <__retarget_lock_acquire_recursive>
 8002afe:	89ab      	ldrh	r3, [r5, #12]
 8002b00:	071b      	lsls	r3, r3, #28
 8002b02:	d501      	bpl.n	8002b08 <_vfiprintf_r+0x3c>
 8002b04:	692b      	ldr	r3, [r5, #16]
 8002b06:	b9eb      	cbnz	r3, 8002b44 <_vfiprintf_r+0x78>
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f000 fb5c 	bl	80031c8 <__swsetup_r>
 8002b10:	b1c0      	cbz	r0, 8002b44 <_vfiprintf_r+0x78>
 8002b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b14:	07dc      	lsls	r4, r3, #31
 8002b16:	d50e      	bpl.n	8002b36 <_vfiprintf_r+0x6a>
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	b01d      	add	sp, #116	; 0x74
 8002b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <_vfiprintf_r+0x244>)
 8002b24:	429d      	cmp	r5, r3
 8002b26:	d101      	bne.n	8002b2c <_vfiprintf_r+0x60>
 8002b28:	68b5      	ldr	r5, [r6, #8]
 8002b2a:	e7df      	b.n	8002aec <_vfiprintf_r+0x20>
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <_vfiprintf_r+0x248>)
 8002b2e:	429d      	cmp	r5, r3
 8002b30:	bf08      	it	eq
 8002b32:	68f5      	ldreq	r5, [r6, #12]
 8002b34:	e7da      	b.n	8002aec <_vfiprintf_r+0x20>
 8002b36:	89ab      	ldrh	r3, [r5, #12]
 8002b38:	0598      	lsls	r0, r3, #22
 8002b3a:	d4ed      	bmi.n	8002b18 <_vfiprintf_r+0x4c>
 8002b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b3e:	f7ff ff42 	bl	80029c6 <__retarget_lock_release_recursive>
 8002b42:	e7e9      	b.n	8002b18 <_vfiprintf_r+0x4c>
 8002b44:	2300      	movs	r3, #0
 8002b46:	9309      	str	r3, [sp, #36]	; 0x24
 8002b48:	2320      	movs	r3, #32
 8002b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b4e:	2330      	movs	r3, #48	; 0x30
 8002b50:	f04f 0901 	mov.w	r9, #1
 8002b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d18 <_vfiprintf_r+0x24c>
 8002b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b60:	4623      	mov	r3, r4
 8002b62:	469a      	mov	sl, r3
 8002b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b68:	b10a      	cbz	r2, 8002b6e <_vfiprintf_r+0xa2>
 8002b6a:	2a25      	cmp	r2, #37	; 0x25
 8002b6c:	d1f9      	bne.n	8002b62 <_vfiprintf_r+0x96>
 8002b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002b72:	d00b      	beq.n	8002b8c <_vfiprintf_r+0xc0>
 8002b74:	465b      	mov	r3, fp
 8002b76:	4622      	mov	r2, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	f7ff ff93 	bl	8002aa6 <__sfputs_r>
 8002b80:	3001      	adds	r0, #1
 8002b82:	f000 80aa 	beq.w	8002cda <_vfiprintf_r+0x20e>
 8002b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b88:	445a      	add	r2, fp
 8002b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a2 	beq.w	8002cda <_vfiprintf_r+0x20e>
 8002b96:	2300      	movs	r3, #0
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ba0:	f10a 0a01 	add.w	sl, sl, #1
 8002ba4:	9304      	str	r3, [sp, #16]
 8002ba6:	9307      	str	r3, [sp, #28]
 8002ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bac:	931a      	str	r3, [sp, #104]	; 0x68
 8002bae:	4654      	mov	r4, sl
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb6:	4858      	ldr	r0, [pc, #352]	; (8002d18 <_vfiprintf_r+0x24c>)
 8002bb8:	f000 fcbc 	bl	8003534 <memchr>
 8002bbc:	9a04      	ldr	r2, [sp, #16]
 8002bbe:	b9d8      	cbnz	r0, 8002bf8 <_vfiprintf_r+0x12c>
 8002bc0:	06d1      	lsls	r1, r2, #27
 8002bc2:	bf44      	itt	mi
 8002bc4:	2320      	movmi	r3, #32
 8002bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bca:	0713      	lsls	r3, r2, #28
 8002bcc:	bf44      	itt	mi
 8002bce:	232b      	movmi	r3, #43	; 0x2b
 8002bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bda:	d015      	beq.n	8002c08 <_vfiprintf_r+0x13c>
 8002bdc:	4654      	mov	r4, sl
 8002bde:	2000      	movs	r0, #0
 8002be0:	f04f 0c0a 	mov.w	ip, #10
 8002be4:	9a07      	ldr	r2, [sp, #28]
 8002be6:	4621      	mov	r1, r4
 8002be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bec:	3b30      	subs	r3, #48	; 0x30
 8002bee:	2b09      	cmp	r3, #9
 8002bf0:	d94e      	bls.n	8002c90 <_vfiprintf_r+0x1c4>
 8002bf2:	b1b0      	cbz	r0, 8002c22 <_vfiprintf_r+0x156>
 8002bf4:	9207      	str	r2, [sp, #28]
 8002bf6:	e014      	b.n	8002c22 <_vfiprintf_r+0x156>
 8002bf8:	eba0 0308 	sub.w	r3, r0, r8
 8002bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	46a2      	mov	sl, r4
 8002c04:	9304      	str	r3, [sp, #16]
 8002c06:	e7d2      	b.n	8002bae <_vfiprintf_r+0xe2>
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	1d19      	adds	r1, r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	9103      	str	r1, [sp, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bfbb      	ittet	lt
 8002c14:	425b      	neglt	r3, r3
 8002c16:	f042 0202 	orrlt.w	r2, r2, #2
 8002c1a:	9307      	strge	r3, [sp, #28]
 8002c1c:	9307      	strlt	r3, [sp, #28]
 8002c1e:	bfb8      	it	lt
 8002c20:	9204      	strlt	r2, [sp, #16]
 8002c22:	7823      	ldrb	r3, [r4, #0]
 8002c24:	2b2e      	cmp	r3, #46	; 0x2e
 8002c26:	d10c      	bne.n	8002c42 <_vfiprintf_r+0x176>
 8002c28:	7863      	ldrb	r3, [r4, #1]
 8002c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2c:	d135      	bne.n	8002c9a <_vfiprintf_r+0x1ce>
 8002c2e:	9b03      	ldr	r3, [sp, #12]
 8002c30:	3402      	adds	r4, #2
 8002c32:	1d1a      	adds	r2, r3, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	9203      	str	r2, [sp, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bfb8      	it	lt
 8002c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c40:	9305      	str	r3, [sp, #20]
 8002c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d28 <_vfiprintf_r+0x25c>
 8002c46:	2203      	movs	r2, #3
 8002c48:	4650      	mov	r0, sl
 8002c4a:	7821      	ldrb	r1, [r4, #0]
 8002c4c:	f000 fc72 	bl	8003534 <memchr>
 8002c50:	b140      	cbz	r0, 8002c64 <_vfiprintf_r+0x198>
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	eba0 000a 	sub.w	r0, r0, sl
 8002c58:	fa03 f000 	lsl.w	r0, r3, r0
 8002c5c:	9b04      	ldr	r3, [sp, #16]
 8002c5e:	3401      	adds	r4, #1
 8002c60:	4303      	orrs	r3, r0
 8002c62:	9304      	str	r3, [sp, #16]
 8002c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c68:	2206      	movs	r2, #6
 8002c6a:	482c      	ldr	r0, [pc, #176]	; (8002d1c <_vfiprintf_r+0x250>)
 8002c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c70:	f000 fc60 	bl	8003534 <memchr>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d03f      	beq.n	8002cf8 <_vfiprintf_r+0x22c>
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <_vfiprintf_r+0x254>)
 8002c7a:	bb1b      	cbnz	r3, 8002cc4 <_vfiprintf_r+0x1f8>
 8002c7c:	9b03      	ldr	r3, [sp, #12]
 8002c7e:	3307      	adds	r3, #7
 8002c80:	f023 0307 	bic.w	r3, r3, #7
 8002c84:	3308      	adds	r3, #8
 8002c86:	9303      	str	r3, [sp, #12]
 8002c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c8a:	443b      	add	r3, r7
 8002c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8e:	e767      	b.n	8002b60 <_vfiprintf_r+0x94>
 8002c90:	460c      	mov	r4, r1
 8002c92:	2001      	movs	r0, #1
 8002c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c98:	e7a5      	b.n	8002be6 <_vfiprintf_r+0x11a>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f04f 0c0a 	mov.w	ip, #10
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	3401      	adds	r4, #1
 8002ca4:	9305      	str	r3, [sp, #20]
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cac:	3a30      	subs	r2, #48	; 0x30
 8002cae:	2a09      	cmp	r2, #9
 8002cb0:	d903      	bls.n	8002cba <_vfiprintf_r+0x1ee>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0c5      	beq.n	8002c42 <_vfiprintf_r+0x176>
 8002cb6:	9105      	str	r1, [sp, #20]
 8002cb8:	e7c3      	b.n	8002c42 <_vfiprintf_r+0x176>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cc2:	e7f0      	b.n	8002ca6 <_vfiprintf_r+0x1da>
 8002cc4:	ab03      	add	r3, sp, #12
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	462a      	mov	r2, r5
 8002cca:	4630      	mov	r0, r6
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <_vfiprintf_r+0x258>)
 8002cce:	a904      	add	r1, sp, #16
 8002cd0:	f3af 8000 	nop.w
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	1c78      	adds	r0, r7, #1
 8002cd8:	d1d6      	bne.n	8002c88 <_vfiprintf_r+0x1bc>
 8002cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cdc:	07d9      	lsls	r1, r3, #31
 8002cde:	d405      	bmi.n	8002cec <_vfiprintf_r+0x220>
 8002ce0:	89ab      	ldrh	r3, [r5, #12]
 8002ce2:	059a      	lsls	r2, r3, #22
 8002ce4:	d402      	bmi.n	8002cec <_vfiprintf_r+0x220>
 8002ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ce8:	f7ff fe6d 	bl	80029c6 <__retarget_lock_release_recursive>
 8002cec:	89ab      	ldrh	r3, [r5, #12]
 8002cee:	065b      	lsls	r3, r3, #25
 8002cf0:	f53f af12 	bmi.w	8002b18 <_vfiprintf_r+0x4c>
 8002cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cf6:	e711      	b.n	8002b1c <_vfiprintf_r+0x50>
 8002cf8:	ab03      	add	r3, sp, #12
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	4630      	mov	r0, r6
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_vfiprintf_r+0x258>)
 8002d02:	a904      	add	r1, sp, #16
 8002d04:	f000 f882 	bl	8002e0c <_printf_i>
 8002d08:	e7e4      	b.n	8002cd4 <_vfiprintf_r+0x208>
 8002d0a:	bf00      	nop
 8002d0c:	08003704 	.word	0x08003704
 8002d10:	08003724 	.word	0x08003724
 8002d14:	080036e4 	.word	0x080036e4
 8002d18:	08003744 	.word	0x08003744
 8002d1c:	0800374e 	.word	0x0800374e
 8002d20:	00000000 	.word	0x00000000
 8002d24:	08002aa7 	.word	0x08002aa7
 8002d28:	0800374a 	.word	0x0800374a

08002d2c <_printf_common>:
 8002d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	4616      	mov	r6, r2
 8002d32:	4699      	mov	r9, r3
 8002d34:	688a      	ldr	r2, [r1, #8]
 8002d36:	690b      	ldr	r3, [r1, #16]
 8002d38:	4607      	mov	r7, r0
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	bfb8      	it	lt
 8002d3e:	4613      	movlt	r3, r2
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d46:	460c      	mov	r4, r1
 8002d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d4c:	b10a      	cbz	r2, 8002d52 <_printf_common+0x26>
 8002d4e:	3301      	adds	r3, #1
 8002d50:	6033      	str	r3, [r6, #0]
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	0699      	lsls	r1, r3, #26
 8002d56:	bf42      	ittt	mi
 8002d58:	6833      	ldrmi	r3, [r6, #0]
 8002d5a:	3302      	addmi	r3, #2
 8002d5c:	6033      	strmi	r3, [r6, #0]
 8002d5e:	6825      	ldr	r5, [r4, #0]
 8002d60:	f015 0506 	ands.w	r5, r5, #6
 8002d64:	d106      	bne.n	8002d74 <_printf_common+0x48>
 8002d66:	f104 0a19 	add.w	sl, r4, #25
 8002d6a:	68e3      	ldr	r3, [r4, #12]
 8002d6c:	6832      	ldr	r2, [r6, #0]
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	dc28      	bgt.n	8002dc6 <_printf_common+0x9a>
 8002d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d78:	1e13      	subs	r3, r2, #0
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	bf18      	it	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	0692      	lsls	r2, r2, #26
 8002d82:	d42d      	bmi.n	8002de0 <_printf_common+0xb4>
 8002d84:	4649      	mov	r1, r9
 8002d86:	4638      	mov	r0, r7
 8002d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d020      	beq.n	8002dd4 <_printf_common+0xa8>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	68e5      	ldr	r5, [r4, #12]
 8002d96:	f003 0306 	and.w	r3, r3, #6
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf18      	it	ne
 8002d9e:	2500      	movne	r5, #0
 8002da0:	6832      	ldr	r2, [r6, #0]
 8002da2:	f04f 0600 	mov.w	r6, #0
 8002da6:	68a3      	ldr	r3, [r4, #8]
 8002da8:	bf08      	it	eq
 8002daa:	1aad      	subeq	r5, r5, r2
 8002dac:	6922      	ldr	r2, [r4, #16]
 8002dae:	bf08      	it	eq
 8002db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bfc4      	itt	gt
 8002db8:	1a9b      	subgt	r3, r3, r2
 8002dba:	18ed      	addgt	r5, r5, r3
 8002dbc:	341a      	adds	r4, #26
 8002dbe:	42b5      	cmp	r5, r6
 8002dc0:	d11a      	bne.n	8002df8 <_printf_common+0xcc>
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	e008      	b.n	8002dd8 <_printf_common+0xac>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	4652      	mov	r2, sl
 8002dca:	4649      	mov	r1, r9
 8002dcc:	4638      	mov	r0, r7
 8002dce:	47c0      	blx	r8
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d103      	bne.n	8002ddc <_printf_common+0xb0>
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ddc:	3501      	adds	r5, #1
 8002dde:	e7c4      	b.n	8002d6a <_printf_common+0x3e>
 8002de0:	2030      	movs	r0, #48	; 0x30
 8002de2:	18e1      	adds	r1, r4, r3
 8002de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dee:	4422      	add	r2, r4
 8002df0:	3302      	adds	r3, #2
 8002df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002df6:	e7c5      	b.n	8002d84 <_printf_common+0x58>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	4638      	mov	r0, r7
 8002e00:	47c0      	blx	r8
 8002e02:	3001      	adds	r0, #1
 8002e04:	d0e6      	beq.n	8002dd4 <_printf_common+0xa8>
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7d9      	b.n	8002dbe <_printf_common+0x92>
	...

08002e0c <_printf_i>:
 8002e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e10:	460c      	mov	r4, r1
 8002e12:	7e27      	ldrb	r7, [r4, #24]
 8002e14:	4691      	mov	r9, r2
 8002e16:	2f78      	cmp	r7, #120	; 0x78
 8002e18:	4680      	mov	r8, r0
 8002e1a:	469a      	mov	sl, r3
 8002e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e22:	d807      	bhi.n	8002e34 <_printf_i+0x28>
 8002e24:	2f62      	cmp	r7, #98	; 0x62
 8002e26:	d80a      	bhi.n	8002e3e <_printf_i+0x32>
 8002e28:	2f00      	cmp	r7, #0
 8002e2a:	f000 80d9 	beq.w	8002fe0 <_printf_i+0x1d4>
 8002e2e:	2f58      	cmp	r7, #88	; 0x58
 8002e30:	f000 80a4 	beq.w	8002f7c <_printf_i+0x170>
 8002e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e3c:	e03a      	b.n	8002eb4 <_printf_i+0xa8>
 8002e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e42:	2b15      	cmp	r3, #21
 8002e44:	d8f6      	bhi.n	8002e34 <_printf_i+0x28>
 8002e46:	a001      	add	r0, pc, #4	; (adr r0, 8002e4c <_printf_i+0x40>)
 8002e48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e4c:	08002ea5 	.word	0x08002ea5
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002e35 	.word	0x08002e35
 8002e58:	08002e35 	.word	0x08002e35
 8002e5c:	08002e35 	.word	0x08002e35
 8002e60:	08002e35 	.word	0x08002e35
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002e35 	.word	0x08002e35
 8002e6c:	08002e35 	.word	0x08002e35
 8002e70:	08002e35 	.word	0x08002e35
 8002e74:	08002e35 	.word	0x08002e35
 8002e78:	08002fc7 	.word	0x08002fc7
 8002e7c:	08002ee9 	.word	0x08002ee9
 8002e80:	08002fa9 	.word	0x08002fa9
 8002e84:	08002e35 	.word	0x08002e35
 8002e88:	08002e35 	.word	0x08002e35
 8002e8c:	08002fe9 	.word	0x08002fe9
 8002e90:	08002e35 	.word	0x08002e35
 8002e94:	08002ee9 	.word	0x08002ee9
 8002e98:	08002e35 	.word	0x08002e35
 8002e9c:	08002e35 	.word	0x08002e35
 8002ea0:	08002fb1 	.word	0x08002fb1
 8002ea4:	680b      	ldr	r3, [r1, #0]
 8002ea6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002eaa:	1d1a      	adds	r2, r3, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	600a      	str	r2, [r1, #0]
 8002eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0a4      	b.n	8003002 <_printf_i+0x1f6>
 8002eb8:	6825      	ldr	r5, [r4, #0]
 8002eba:	6808      	ldr	r0, [r1, #0]
 8002ebc:	062e      	lsls	r6, r5, #24
 8002ebe:	f100 0304 	add.w	r3, r0, #4
 8002ec2:	d50a      	bpl.n	8002eda <_printf_i+0xce>
 8002ec4:	6805      	ldr	r5, [r0, #0]
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	2d00      	cmp	r5, #0
 8002eca:	da03      	bge.n	8002ed4 <_printf_i+0xc8>
 8002ecc:	232d      	movs	r3, #45	; 0x2d
 8002ece:	426d      	negs	r5, r5
 8002ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ed4:	230a      	movs	r3, #10
 8002ed6:	485e      	ldr	r0, [pc, #376]	; (8003050 <_printf_i+0x244>)
 8002ed8:	e019      	b.n	8002f0e <_printf_i+0x102>
 8002eda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ede:	6805      	ldr	r5, [r0, #0]
 8002ee0:	600b      	str	r3, [r1, #0]
 8002ee2:	bf18      	it	ne
 8002ee4:	b22d      	sxthne	r5, r5
 8002ee6:	e7ef      	b.n	8002ec8 <_printf_i+0xbc>
 8002ee8:	680b      	ldr	r3, [r1, #0]
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	1d18      	adds	r0, r3, #4
 8002eee:	6008      	str	r0, [r1, #0]
 8002ef0:	0628      	lsls	r0, r5, #24
 8002ef2:	d501      	bpl.n	8002ef8 <_printf_i+0xec>
 8002ef4:	681d      	ldr	r5, [r3, #0]
 8002ef6:	e002      	b.n	8002efe <_printf_i+0xf2>
 8002ef8:	0669      	lsls	r1, r5, #25
 8002efa:	d5fb      	bpl.n	8002ef4 <_printf_i+0xe8>
 8002efc:	881d      	ldrh	r5, [r3, #0]
 8002efe:	2f6f      	cmp	r7, #111	; 0x6f
 8002f00:	bf0c      	ite	eq
 8002f02:	2308      	moveq	r3, #8
 8002f04:	230a      	movne	r3, #10
 8002f06:	4852      	ldr	r0, [pc, #328]	; (8003050 <_printf_i+0x244>)
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f0e:	6866      	ldr	r6, [r4, #4]
 8002f10:	2e00      	cmp	r6, #0
 8002f12:	bfa8      	it	ge
 8002f14:	6821      	ldrge	r1, [r4, #0]
 8002f16:	60a6      	str	r6, [r4, #8]
 8002f18:	bfa4      	itt	ge
 8002f1a:	f021 0104 	bicge.w	r1, r1, #4
 8002f1e:	6021      	strge	r1, [r4, #0]
 8002f20:	b90d      	cbnz	r5, 8002f26 <_printf_i+0x11a>
 8002f22:	2e00      	cmp	r6, #0
 8002f24:	d04d      	beq.n	8002fc2 <_printf_i+0x1b6>
 8002f26:	4616      	mov	r6, r2
 8002f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f30:	5dc7      	ldrb	r7, [r0, r7]
 8002f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f36:	462f      	mov	r7, r5
 8002f38:	42bb      	cmp	r3, r7
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	d9f4      	bls.n	8002f28 <_printf_i+0x11c>
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d10b      	bne.n	8002f5a <_printf_i+0x14e>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	07df      	lsls	r7, r3, #31
 8002f46:	d508      	bpl.n	8002f5a <_printf_i+0x14e>
 8002f48:	6923      	ldr	r3, [r4, #16]
 8002f4a:	6861      	ldr	r1, [r4, #4]
 8002f4c:	4299      	cmp	r1, r3
 8002f4e:	bfde      	ittt	le
 8002f50:	2330      	movle	r3, #48	; 0x30
 8002f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f5a:	1b92      	subs	r2, r2, r6
 8002f5c:	6122      	str	r2, [r4, #16]
 8002f5e:	464b      	mov	r3, r9
 8002f60:	4621      	mov	r1, r4
 8002f62:	4640      	mov	r0, r8
 8002f64:	f8cd a000 	str.w	sl, [sp]
 8002f68:	aa03      	add	r2, sp, #12
 8002f6a:	f7ff fedf 	bl	8002d2c <_printf_common>
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d14c      	bne.n	800300c <_printf_i+0x200>
 8002f72:	f04f 30ff 	mov.w	r0, #4294967295
 8002f76:	b004      	add	sp, #16
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7c:	4834      	ldr	r0, [pc, #208]	; (8003050 <_printf_i+0x244>)
 8002f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f82:	680e      	ldr	r6, [r1, #0]
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f8a:	061f      	lsls	r7, r3, #24
 8002f8c:	600e      	str	r6, [r1, #0]
 8002f8e:	d514      	bpl.n	8002fba <_printf_i+0x1ae>
 8002f90:	07d9      	lsls	r1, r3, #31
 8002f92:	bf44      	itt	mi
 8002f94:	f043 0320 	orrmi.w	r3, r3, #32
 8002f98:	6023      	strmi	r3, [r4, #0]
 8002f9a:	b91d      	cbnz	r5, 8002fa4 <_printf_i+0x198>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	f023 0320 	bic.w	r3, r3, #32
 8002fa2:	6023      	str	r3, [r4, #0]
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	e7af      	b.n	8002f08 <_printf_i+0xfc>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	2378      	movs	r3, #120	; 0x78
 8002fb2:	4828      	ldr	r0, [pc, #160]	; (8003054 <_printf_i+0x248>)
 8002fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fb8:	e7e3      	b.n	8002f82 <_printf_i+0x176>
 8002fba:	065e      	lsls	r6, r3, #25
 8002fbc:	bf48      	it	mi
 8002fbe:	b2ad      	uxthmi	r5, r5
 8002fc0:	e7e6      	b.n	8002f90 <_printf_i+0x184>
 8002fc2:	4616      	mov	r6, r2
 8002fc4:	e7bb      	b.n	8002f3e <_printf_i+0x132>
 8002fc6:	680b      	ldr	r3, [r1, #0]
 8002fc8:	6826      	ldr	r6, [r4, #0]
 8002fca:	1d1d      	adds	r5, r3, #4
 8002fcc:	6960      	ldr	r0, [r4, #20]
 8002fce:	600d      	str	r5, [r1, #0]
 8002fd0:	0635      	lsls	r5, r6, #24
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	d501      	bpl.n	8002fda <_printf_i+0x1ce>
 8002fd6:	6018      	str	r0, [r3, #0]
 8002fd8:	e002      	b.n	8002fe0 <_printf_i+0x1d4>
 8002fda:	0671      	lsls	r1, r6, #25
 8002fdc:	d5fb      	bpl.n	8002fd6 <_printf_i+0x1ca>
 8002fde:	8018      	strh	r0, [r3, #0]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4616      	mov	r6, r2
 8002fe4:	6123      	str	r3, [r4, #16]
 8002fe6:	e7ba      	b.n	8002f5e <_printf_i+0x152>
 8002fe8:	680b      	ldr	r3, [r1, #0]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	600a      	str	r2, [r1, #0]
 8002fee:	681e      	ldr	r6, [r3, #0]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	6862      	ldr	r2, [r4, #4]
 8002ff6:	f000 fa9d 	bl	8003534 <memchr>
 8002ffa:	b108      	cbz	r0, 8003000 <_printf_i+0x1f4>
 8002ffc:	1b80      	subs	r0, r0, r6
 8002ffe:	6060      	str	r0, [r4, #4]
 8003000:	6863      	ldr	r3, [r4, #4]
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	2300      	movs	r3, #0
 8003006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800300a:	e7a8      	b.n	8002f5e <_printf_i+0x152>
 800300c:	4632      	mov	r2, r6
 800300e:	4649      	mov	r1, r9
 8003010:	4640      	mov	r0, r8
 8003012:	6923      	ldr	r3, [r4, #16]
 8003014:	47d0      	blx	sl
 8003016:	3001      	adds	r0, #1
 8003018:	d0ab      	beq.n	8002f72 <_printf_i+0x166>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	079b      	lsls	r3, r3, #30
 800301e:	d413      	bmi.n	8003048 <_printf_i+0x23c>
 8003020:	68e0      	ldr	r0, [r4, #12]
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	4298      	cmp	r0, r3
 8003026:	bfb8      	it	lt
 8003028:	4618      	movlt	r0, r3
 800302a:	e7a4      	b.n	8002f76 <_printf_i+0x16a>
 800302c:	2301      	movs	r3, #1
 800302e:	4632      	mov	r2, r6
 8003030:	4649      	mov	r1, r9
 8003032:	4640      	mov	r0, r8
 8003034:	47d0      	blx	sl
 8003036:	3001      	adds	r0, #1
 8003038:	d09b      	beq.n	8002f72 <_printf_i+0x166>
 800303a:	3501      	adds	r5, #1
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	9903      	ldr	r1, [sp, #12]
 8003040:	1a5b      	subs	r3, r3, r1
 8003042:	42ab      	cmp	r3, r5
 8003044:	dcf2      	bgt.n	800302c <_printf_i+0x220>
 8003046:	e7eb      	b.n	8003020 <_printf_i+0x214>
 8003048:	2500      	movs	r5, #0
 800304a:	f104 0619 	add.w	r6, r4, #25
 800304e:	e7f5      	b.n	800303c <_printf_i+0x230>
 8003050:	08003755 	.word	0x08003755
 8003054:	08003766 	.word	0x08003766

08003058 <_sbrk_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	2300      	movs	r3, #0
 800305c:	4d05      	ldr	r5, [pc, #20]	; (8003074 <_sbrk_r+0x1c>)
 800305e:	4604      	mov	r4, r0
 8003060:	4608      	mov	r0, r1
 8003062:	602b      	str	r3, [r5, #0]
 8003064:	f7fd fae8 	bl	8000638 <_sbrk>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d102      	bne.n	8003072 <_sbrk_r+0x1a>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	b103      	cbz	r3, 8003072 <_sbrk_r+0x1a>
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	2000014c 	.word	0x2000014c

08003078 <__sread>:
 8003078:	b510      	push	{r4, lr}
 800307a:	460c      	mov	r4, r1
 800307c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003080:	f000 fabe 	bl	8003600 <_read_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	bfab      	itete	ge
 8003088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800308a:	89a3      	ldrhlt	r3, [r4, #12]
 800308c:	181b      	addge	r3, r3, r0
 800308e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003092:	bfac      	ite	ge
 8003094:	6563      	strge	r3, [r4, #84]	; 0x54
 8003096:	81a3      	strhlt	r3, [r4, #12]
 8003098:	bd10      	pop	{r4, pc}

0800309a <__swrite>:
 800309a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800309e:	461f      	mov	r7, r3
 80030a0:	898b      	ldrh	r3, [r1, #12]
 80030a2:	4605      	mov	r5, r0
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	460c      	mov	r4, r1
 80030a8:	4616      	mov	r6, r2
 80030aa:	d505      	bpl.n	80030b8 <__swrite+0x1e>
 80030ac:	2302      	movs	r3, #2
 80030ae:	2200      	movs	r2, #0
 80030b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b4:	f000 f9c8 	bl	8003448 <_lseek_r>
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	4632      	mov	r2, r6
 80030bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c0:	81a3      	strh	r3, [r4, #12]
 80030c2:	4628      	mov	r0, r5
 80030c4:	463b      	mov	r3, r7
 80030c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030ce:	f000 b869 	b.w	80031a4 <_write_r>

080030d2 <__sseek>:
 80030d2:	b510      	push	{r4, lr}
 80030d4:	460c      	mov	r4, r1
 80030d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030da:	f000 f9b5 	bl	8003448 <_lseek_r>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	bf15      	itete	ne
 80030e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80030e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030ee:	81a3      	strheq	r3, [r4, #12]
 80030f0:	bf18      	it	ne
 80030f2:	81a3      	strhne	r3, [r4, #12]
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <__sclose>:
 80030f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fa:	f000 b8d3 	b.w	80032a4 <_close_r>
	...

08003100 <__swbuf_r>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	460e      	mov	r6, r1
 8003104:	4614      	mov	r4, r2
 8003106:	4605      	mov	r5, r0
 8003108:	b118      	cbz	r0, 8003112 <__swbuf_r+0x12>
 800310a:	6983      	ldr	r3, [r0, #24]
 800310c:	b90b      	cbnz	r3, 8003112 <__swbuf_r+0x12>
 800310e:	f7ff fbbb 	bl	8002888 <__sinit>
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <__swbuf_r+0x98>)
 8003114:	429c      	cmp	r4, r3
 8003116:	d12b      	bne.n	8003170 <__swbuf_r+0x70>
 8003118:	686c      	ldr	r4, [r5, #4]
 800311a:	69a3      	ldr	r3, [r4, #24]
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	071a      	lsls	r2, r3, #28
 8003122:	d52f      	bpl.n	8003184 <__swbuf_r+0x84>
 8003124:	6923      	ldr	r3, [r4, #16]
 8003126:	b36b      	cbz	r3, 8003184 <__swbuf_r+0x84>
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	b2f6      	uxtb	r6, r6
 800312e:	1ac0      	subs	r0, r0, r3
 8003130:	6963      	ldr	r3, [r4, #20]
 8003132:	4637      	mov	r7, r6
 8003134:	4283      	cmp	r3, r0
 8003136:	dc04      	bgt.n	8003142 <__swbuf_r+0x42>
 8003138:	4621      	mov	r1, r4
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f948 	bl	80033d0 <_fflush_r>
 8003140:	bb30      	cbnz	r0, 8003190 <__swbuf_r+0x90>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	3001      	adds	r0, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	60a3      	str	r3, [r4, #8]
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	6022      	str	r2, [r4, #0]
 8003150:	701e      	strb	r6, [r3, #0]
 8003152:	6963      	ldr	r3, [r4, #20]
 8003154:	4283      	cmp	r3, r0
 8003156:	d004      	beq.n	8003162 <__swbuf_r+0x62>
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	07db      	lsls	r3, r3, #31
 800315c:	d506      	bpl.n	800316c <__swbuf_r+0x6c>
 800315e:	2e0a      	cmp	r6, #10
 8003160:	d104      	bne.n	800316c <__swbuf_r+0x6c>
 8003162:	4621      	mov	r1, r4
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f933 	bl	80033d0 <_fflush_r>
 800316a:	b988      	cbnz	r0, 8003190 <__swbuf_r+0x90>
 800316c:	4638      	mov	r0, r7
 800316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <__swbuf_r+0x9c>)
 8003172:	429c      	cmp	r4, r3
 8003174:	d101      	bne.n	800317a <__swbuf_r+0x7a>
 8003176:	68ac      	ldr	r4, [r5, #8]
 8003178:	e7cf      	b.n	800311a <__swbuf_r+0x1a>
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <__swbuf_r+0xa0>)
 800317c:	429c      	cmp	r4, r3
 800317e:	bf08      	it	eq
 8003180:	68ec      	ldreq	r4, [r5, #12]
 8003182:	e7ca      	b.n	800311a <__swbuf_r+0x1a>
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f000 f81e 	bl	80031c8 <__swsetup_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	d0cb      	beq.n	8003128 <__swbuf_r+0x28>
 8003190:	f04f 37ff 	mov.w	r7, #4294967295
 8003194:	e7ea      	b.n	800316c <__swbuf_r+0x6c>
 8003196:	bf00      	nop
 8003198:	08003704 	.word	0x08003704
 800319c:	08003724 	.word	0x08003724
 80031a0:	080036e4 	.word	0x080036e4

080031a4 <_write_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4604      	mov	r4, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	2200      	movs	r2, #0
 80031ae:	4d05      	ldr	r5, [pc, #20]	; (80031c4 <_write_r+0x20>)
 80031b0:	602a      	str	r2, [r5, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f7fd f9f4 	bl	80005a0 <_write>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d102      	bne.n	80031c2 <_write_r+0x1e>
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	b103      	cbz	r3, 80031c2 <_write_r+0x1e>
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	2000014c 	.word	0x2000014c

080031c8 <__swsetup_r>:
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <__swsetup_r+0xcc>)
 80031ca:	b570      	push	{r4, r5, r6, lr}
 80031cc:	681d      	ldr	r5, [r3, #0]
 80031ce:	4606      	mov	r6, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	b125      	cbz	r5, 80031de <__swsetup_r+0x16>
 80031d4:	69ab      	ldr	r3, [r5, #24]
 80031d6:	b913      	cbnz	r3, 80031de <__swsetup_r+0x16>
 80031d8:	4628      	mov	r0, r5
 80031da:	f7ff fb55 	bl	8002888 <__sinit>
 80031de:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <__swsetup_r+0xd0>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	d10f      	bne.n	8003204 <__swsetup_r+0x3c>
 80031e4:	686c      	ldr	r4, [r5, #4]
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031ec:	0719      	lsls	r1, r3, #28
 80031ee:	d42c      	bmi.n	800324a <__swsetup_r+0x82>
 80031f0:	06dd      	lsls	r5, r3, #27
 80031f2:	d411      	bmi.n	8003218 <__swsetup_r+0x50>
 80031f4:	2309      	movs	r3, #9
 80031f6:	6033      	str	r3, [r6, #0]
 80031f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	e03e      	b.n	8003282 <__swsetup_r+0xba>
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <__swsetup_r+0xd4>)
 8003206:	429c      	cmp	r4, r3
 8003208:	d101      	bne.n	800320e <__swsetup_r+0x46>
 800320a:	68ac      	ldr	r4, [r5, #8]
 800320c:	e7eb      	b.n	80031e6 <__swsetup_r+0x1e>
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <__swsetup_r+0xd8>)
 8003210:	429c      	cmp	r4, r3
 8003212:	bf08      	it	eq
 8003214:	68ec      	ldreq	r4, [r5, #12]
 8003216:	e7e6      	b.n	80031e6 <__swsetup_r+0x1e>
 8003218:	0758      	lsls	r0, r3, #29
 800321a:	d512      	bpl.n	8003242 <__swsetup_r+0x7a>
 800321c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800321e:	b141      	cbz	r1, 8003232 <__swsetup_r+0x6a>
 8003220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003224:	4299      	cmp	r1, r3
 8003226:	d002      	beq.n	800322e <__swsetup_r+0x66>
 8003228:	4630      	mov	r0, r6
 800322a:	f000 f99d 	bl	8003568 <_free_r>
 800322e:	2300      	movs	r3, #0
 8003230:	6363      	str	r3, [r4, #52]	; 0x34
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	2300      	movs	r3, #0
 800323c:	6063      	str	r3, [r4, #4]
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	6923      	ldr	r3, [r4, #16]
 800324c:	b94b      	cbnz	r3, 8003262 <__swsetup_r+0x9a>
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003258:	d003      	beq.n	8003262 <__swsetup_r+0x9a>
 800325a:	4621      	mov	r1, r4
 800325c:	4630      	mov	r0, r6
 800325e:	f000 f929 	bl	80034b4 <__smakebuf_r>
 8003262:	89a0      	ldrh	r0, [r4, #12]
 8003264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003268:	f010 0301 	ands.w	r3, r0, #1
 800326c:	d00a      	beq.n	8003284 <__swsetup_r+0xbc>
 800326e:	2300      	movs	r3, #0
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	6963      	ldr	r3, [r4, #20]
 8003274:	425b      	negs	r3, r3
 8003276:	61a3      	str	r3, [r4, #24]
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	b943      	cbnz	r3, 800328e <__swsetup_r+0xc6>
 800327c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003280:	d1ba      	bne.n	80031f8 <__swsetup_r+0x30>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	0781      	lsls	r1, r0, #30
 8003286:	bf58      	it	pl
 8003288:	6963      	ldrpl	r3, [r4, #20]
 800328a:	60a3      	str	r3, [r4, #8]
 800328c:	e7f4      	b.n	8003278 <__swsetup_r+0xb0>
 800328e:	2000      	movs	r0, #0
 8003290:	e7f7      	b.n	8003282 <__swsetup_r+0xba>
 8003292:	bf00      	nop
 8003294:	2000000c 	.word	0x2000000c
 8003298:	08003704 	.word	0x08003704
 800329c:	08003724 	.word	0x08003724
 80032a0:	080036e4 	.word	0x080036e4

080032a4 <_close_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	2300      	movs	r3, #0
 80032a8:	4d05      	ldr	r5, [pc, #20]	; (80032c0 <_close_r+0x1c>)
 80032aa:	4604      	mov	r4, r0
 80032ac:	4608      	mov	r0, r1
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	f7fd f992 	bl	80005d8 <_close>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_close_r+0x1a>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b103      	cbz	r3, 80032be <_close_r+0x1a>
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	2000014c 	.word	0x2000014c

080032c4 <__sflush_r>:
 80032c4:	898a      	ldrh	r2, [r1, #12]
 80032c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ca:	4605      	mov	r5, r0
 80032cc:	0710      	lsls	r0, r2, #28
 80032ce:	460c      	mov	r4, r1
 80032d0:	d458      	bmi.n	8003384 <__sflush_r+0xc0>
 80032d2:	684b      	ldr	r3, [r1, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dc05      	bgt.n	80032e4 <__sflush_r+0x20>
 80032d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dc02      	bgt.n	80032e4 <__sflush_r+0x20>
 80032de:	2000      	movs	r0, #0
 80032e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	d0f9      	beq.n	80032de <__sflush_r+0x1a>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032f0:	682f      	ldr	r7, [r5, #0]
 80032f2:	602b      	str	r3, [r5, #0]
 80032f4:	d032      	beq.n	800335c <__sflush_r+0x98>
 80032f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	075a      	lsls	r2, r3, #29
 80032fc:	d505      	bpl.n	800330a <__sflush_r+0x46>
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	1ac0      	subs	r0, r0, r3
 8003302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003304:	b10b      	cbz	r3, 800330a <__sflush_r+0x46>
 8003306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003308:	1ac0      	subs	r0, r0, r3
 800330a:	2300      	movs	r3, #0
 800330c:	4602      	mov	r2, r0
 800330e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003310:	4628      	mov	r0, r5
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	47b0      	blx	r6
 8003316:	1c43      	adds	r3, r0, #1
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	d106      	bne.n	800332a <__sflush_r+0x66>
 800331c:	6829      	ldr	r1, [r5, #0]
 800331e:	291d      	cmp	r1, #29
 8003320:	d82c      	bhi.n	800337c <__sflush_r+0xb8>
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <__sflush_r+0x108>)
 8003324:	40ca      	lsrs	r2, r1
 8003326:	07d6      	lsls	r6, r2, #31
 8003328:	d528      	bpl.n	800337c <__sflush_r+0xb8>
 800332a:	2200      	movs	r2, #0
 800332c:	6062      	str	r2, [r4, #4]
 800332e:	6922      	ldr	r2, [r4, #16]
 8003330:	04d9      	lsls	r1, r3, #19
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	d504      	bpl.n	8003340 <__sflush_r+0x7c>
 8003336:	1c42      	adds	r2, r0, #1
 8003338:	d101      	bne.n	800333e <__sflush_r+0x7a>
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	b903      	cbnz	r3, 8003340 <__sflush_r+0x7c>
 800333e:	6560      	str	r0, [r4, #84]	; 0x54
 8003340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003342:	602f      	str	r7, [r5, #0]
 8003344:	2900      	cmp	r1, #0
 8003346:	d0ca      	beq.n	80032de <__sflush_r+0x1a>
 8003348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800334c:	4299      	cmp	r1, r3
 800334e:	d002      	beq.n	8003356 <__sflush_r+0x92>
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f909 	bl	8003568 <_free_r>
 8003356:	2000      	movs	r0, #0
 8003358:	6360      	str	r0, [r4, #52]	; 0x34
 800335a:	e7c1      	b.n	80032e0 <__sflush_r+0x1c>
 800335c:	6a21      	ldr	r1, [r4, #32]
 800335e:	2301      	movs	r3, #1
 8003360:	4628      	mov	r0, r5
 8003362:	47b0      	blx	r6
 8003364:	1c41      	adds	r1, r0, #1
 8003366:	d1c7      	bne.n	80032f8 <__sflush_r+0x34>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c4      	beq.n	80032f8 <__sflush_r+0x34>
 800336e:	2b1d      	cmp	r3, #29
 8003370:	d001      	beq.n	8003376 <__sflush_r+0xb2>
 8003372:	2b16      	cmp	r3, #22
 8003374:	d101      	bne.n	800337a <__sflush_r+0xb6>
 8003376:	602f      	str	r7, [r5, #0]
 8003378:	e7b1      	b.n	80032de <__sflush_r+0x1a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	e7ad      	b.n	80032e0 <__sflush_r+0x1c>
 8003384:	690f      	ldr	r7, [r1, #16]
 8003386:	2f00      	cmp	r7, #0
 8003388:	d0a9      	beq.n	80032de <__sflush_r+0x1a>
 800338a:	0793      	lsls	r3, r2, #30
 800338c:	bf18      	it	ne
 800338e:	2300      	movne	r3, #0
 8003390:	680e      	ldr	r6, [r1, #0]
 8003392:	bf08      	it	eq
 8003394:	694b      	ldreq	r3, [r1, #20]
 8003396:	eba6 0807 	sub.w	r8, r6, r7
 800339a:	600f      	str	r7, [r1, #0]
 800339c:	608b      	str	r3, [r1, #8]
 800339e:	f1b8 0f00 	cmp.w	r8, #0
 80033a2:	dd9c      	ble.n	80032de <__sflush_r+0x1a>
 80033a4:	4643      	mov	r3, r8
 80033a6:	463a      	mov	r2, r7
 80033a8:	4628      	mov	r0, r5
 80033aa:	6a21      	ldr	r1, [r4, #32]
 80033ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033ae:	47b0      	blx	r6
 80033b0:	2800      	cmp	r0, #0
 80033b2:	dc06      	bgt.n	80033c2 <__sflush_r+0xfe>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	e78e      	b.n	80032e0 <__sflush_r+0x1c>
 80033c2:	4407      	add	r7, r0
 80033c4:	eba8 0800 	sub.w	r8, r8, r0
 80033c8:	e7e9      	b.n	800339e <__sflush_r+0xda>
 80033ca:	bf00      	nop
 80033cc:	20400001 	.word	0x20400001

080033d0 <_fflush_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	690b      	ldr	r3, [r1, #16]
 80033d4:	4605      	mov	r5, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	b913      	cbnz	r3, 80033e0 <_fflush_r+0x10>
 80033da:	2500      	movs	r5, #0
 80033dc:	4628      	mov	r0, r5
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	b118      	cbz	r0, 80033ea <_fflush_r+0x1a>
 80033e2:	6983      	ldr	r3, [r0, #24]
 80033e4:	b90b      	cbnz	r3, 80033ea <_fflush_r+0x1a>
 80033e6:	f7ff fa4f 	bl	8002888 <__sinit>
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <_fflush_r+0x6c>)
 80033ec:	429c      	cmp	r4, r3
 80033ee:	d11b      	bne.n	8003428 <_fflush_r+0x58>
 80033f0:	686c      	ldr	r4, [r5, #4]
 80033f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ef      	beq.n	80033da <_fflush_r+0xa>
 80033fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033fc:	07d0      	lsls	r0, r2, #31
 80033fe:	d404      	bmi.n	800340a <_fflush_r+0x3a>
 8003400:	0599      	lsls	r1, r3, #22
 8003402:	d402      	bmi.n	800340a <_fflush_r+0x3a>
 8003404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003406:	f7ff fadd 	bl	80029c4 <__retarget_lock_acquire_recursive>
 800340a:	4628      	mov	r0, r5
 800340c:	4621      	mov	r1, r4
 800340e:	f7ff ff59 	bl	80032c4 <__sflush_r>
 8003412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003414:	4605      	mov	r5, r0
 8003416:	07da      	lsls	r2, r3, #31
 8003418:	d4e0      	bmi.n	80033dc <_fflush_r+0xc>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	059b      	lsls	r3, r3, #22
 800341e:	d4dd      	bmi.n	80033dc <_fflush_r+0xc>
 8003420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003422:	f7ff fad0 	bl	80029c6 <__retarget_lock_release_recursive>
 8003426:	e7d9      	b.n	80033dc <_fflush_r+0xc>
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <_fflush_r+0x70>)
 800342a:	429c      	cmp	r4, r3
 800342c:	d101      	bne.n	8003432 <_fflush_r+0x62>
 800342e:	68ac      	ldr	r4, [r5, #8]
 8003430:	e7df      	b.n	80033f2 <_fflush_r+0x22>
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <_fflush_r+0x74>)
 8003434:	429c      	cmp	r4, r3
 8003436:	bf08      	it	eq
 8003438:	68ec      	ldreq	r4, [r5, #12]
 800343a:	e7da      	b.n	80033f2 <_fflush_r+0x22>
 800343c:	08003704 	.word	0x08003704
 8003440:	08003724 	.word	0x08003724
 8003444:	080036e4 	.word	0x080036e4

08003448 <_lseek_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	2200      	movs	r2, #0
 8003452:	4d05      	ldr	r5, [pc, #20]	; (8003468 <_lseek_r+0x20>)
 8003454:	602a      	str	r2, [r5, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f7fd f8e2 	bl	8000620 <_lseek>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_lseek_r+0x1e>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_lseek_r+0x1e>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	2000014c 	.word	0x2000014c

0800346c <__swhatbuf_r>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	460e      	mov	r6, r1
 8003470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003474:	4614      	mov	r4, r2
 8003476:	2900      	cmp	r1, #0
 8003478:	461d      	mov	r5, r3
 800347a:	b096      	sub	sp, #88	; 0x58
 800347c:	da07      	bge.n	800348e <__swhatbuf_r+0x22>
 800347e:	2300      	movs	r3, #0
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	89b3      	ldrh	r3, [r6, #12]
 8003484:	061a      	lsls	r2, r3, #24
 8003486:	d410      	bmi.n	80034aa <__swhatbuf_r+0x3e>
 8003488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800348c:	e00e      	b.n	80034ac <__swhatbuf_r+0x40>
 800348e:	466a      	mov	r2, sp
 8003490:	f000 f8c8 	bl	8003624 <_fstat_r>
 8003494:	2800      	cmp	r0, #0
 8003496:	dbf2      	blt.n	800347e <__swhatbuf_r+0x12>
 8003498:	9a01      	ldr	r2, [sp, #4]
 800349a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800349e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034a2:	425a      	negs	r2, r3
 80034a4:	415a      	adcs	r2, r3
 80034a6:	602a      	str	r2, [r5, #0]
 80034a8:	e7ee      	b.n	8003488 <__swhatbuf_r+0x1c>
 80034aa:	2340      	movs	r3, #64	; 0x40
 80034ac:	2000      	movs	r0, #0
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	b016      	add	sp, #88	; 0x58
 80034b2:	bd70      	pop	{r4, r5, r6, pc}

080034b4 <__smakebuf_r>:
 80034b4:	898b      	ldrh	r3, [r1, #12]
 80034b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034b8:	079d      	lsls	r5, r3, #30
 80034ba:	4606      	mov	r6, r0
 80034bc:	460c      	mov	r4, r1
 80034be:	d507      	bpl.n	80034d0 <__smakebuf_r+0x1c>
 80034c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	6123      	str	r3, [r4, #16]
 80034c8:	2301      	movs	r3, #1
 80034ca:	6163      	str	r3, [r4, #20]
 80034cc:	b002      	add	sp, #8
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	466a      	mov	r2, sp
 80034d2:	ab01      	add	r3, sp, #4
 80034d4:	f7ff ffca 	bl	800346c <__swhatbuf_r>
 80034d8:	9900      	ldr	r1, [sp, #0]
 80034da:	4605      	mov	r5, r0
 80034dc:	4630      	mov	r0, r6
 80034de:	f7ff fa73 	bl	80029c8 <_malloc_r>
 80034e2:	b948      	cbnz	r0, 80034f8 <__smakebuf_r+0x44>
 80034e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e8:	059a      	lsls	r2, r3, #22
 80034ea:	d4ef      	bmi.n	80034cc <__smakebuf_r+0x18>
 80034ec:	f023 0303 	bic.w	r3, r3, #3
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	e7e3      	b.n	80034c0 <__smakebuf_r+0xc>
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <__smakebuf_r+0x7c>)
 80034fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	6020      	str	r0, [r4, #0]
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	9b00      	ldr	r3, [sp, #0]
 8003508:	6120      	str	r0, [r4, #16]
 800350a:	6163      	str	r3, [r4, #20]
 800350c:	9b01      	ldr	r3, [sp, #4]
 800350e:	b15b      	cbz	r3, 8003528 <__smakebuf_r+0x74>
 8003510:	4630      	mov	r0, r6
 8003512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003516:	f000 f897 	bl	8003648 <_isatty_r>
 800351a:	b128      	cbz	r0, 8003528 <__smakebuf_r+0x74>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	89a0      	ldrh	r0, [r4, #12]
 800352a:	4305      	orrs	r5, r0
 800352c:	81a5      	strh	r5, [r4, #12]
 800352e:	e7cd      	b.n	80034cc <__smakebuf_r+0x18>
 8003530:	08002821 	.word	0x08002821

08003534 <memchr>:
 8003534:	4603      	mov	r3, r0
 8003536:	b510      	push	{r4, lr}
 8003538:	b2c9      	uxtb	r1, r1
 800353a:	4402      	add	r2, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	4618      	mov	r0, r3
 8003540:	d101      	bne.n	8003546 <memchr+0x12>
 8003542:	2000      	movs	r0, #0
 8003544:	e003      	b.n	800354e <memchr+0x1a>
 8003546:	7804      	ldrb	r4, [r0, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	428c      	cmp	r4, r1
 800354c:	d1f6      	bne.n	800353c <memchr+0x8>
 800354e:	bd10      	pop	{r4, pc}

08003550 <__malloc_lock>:
 8003550:	4801      	ldr	r0, [pc, #4]	; (8003558 <__malloc_lock+0x8>)
 8003552:	f7ff ba37 	b.w	80029c4 <__retarget_lock_acquire_recursive>
 8003556:	bf00      	nop
 8003558:	20000144 	.word	0x20000144

0800355c <__malloc_unlock>:
 800355c:	4801      	ldr	r0, [pc, #4]	; (8003564 <__malloc_unlock+0x8>)
 800355e:	f7ff ba32 	b.w	80029c6 <__retarget_lock_release_recursive>
 8003562:	bf00      	nop
 8003564:	20000144 	.word	0x20000144

08003568 <_free_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4605      	mov	r5, r0
 800356c:	2900      	cmp	r1, #0
 800356e:	d043      	beq.n	80035f8 <_free_r+0x90>
 8003570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003574:	1f0c      	subs	r4, r1, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	bfb8      	it	lt
 800357a:	18e4      	addlt	r4, r4, r3
 800357c:	f7ff ffe8 	bl	8003550 <__malloc_lock>
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <_free_r+0x94>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	4610      	mov	r0, r2
 8003586:	b933      	cbnz	r3, 8003596 <_free_r+0x2e>
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	6014      	str	r4, [r2, #0]
 800358c:	4628      	mov	r0, r5
 800358e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003592:	f7ff bfe3 	b.w	800355c <__malloc_unlock>
 8003596:	42a3      	cmp	r3, r4
 8003598:	d90a      	bls.n	80035b0 <_free_r+0x48>
 800359a:	6821      	ldr	r1, [r4, #0]
 800359c:	1862      	adds	r2, r4, r1
 800359e:	4293      	cmp	r3, r2
 80035a0:	bf01      	itttt	eq
 80035a2:	681a      	ldreq	r2, [r3, #0]
 80035a4:	685b      	ldreq	r3, [r3, #4]
 80035a6:	1852      	addeq	r2, r2, r1
 80035a8:	6022      	streq	r2, [r4, #0]
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	6004      	str	r4, [r0, #0]
 80035ae:	e7ed      	b.n	800358c <_free_r+0x24>
 80035b0:	461a      	mov	r2, r3
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b10b      	cbz	r3, 80035ba <_free_r+0x52>
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	d9fa      	bls.n	80035b0 <_free_r+0x48>
 80035ba:	6811      	ldr	r1, [r2, #0]
 80035bc:	1850      	adds	r0, r2, r1
 80035be:	42a0      	cmp	r0, r4
 80035c0:	d10b      	bne.n	80035da <_free_r+0x72>
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	4401      	add	r1, r0
 80035c6:	1850      	adds	r0, r2, r1
 80035c8:	4283      	cmp	r3, r0
 80035ca:	6011      	str	r1, [r2, #0]
 80035cc:	d1de      	bne.n	800358c <_free_r+0x24>
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4401      	add	r1, r0
 80035d4:	6011      	str	r1, [r2, #0]
 80035d6:	6053      	str	r3, [r2, #4]
 80035d8:	e7d8      	b.n	800358c <_free_r+0x24>
 80035da:	d902      	bls.n	80035e2 <_free_r+0x7a>
 80035dc:	230c      	movs	r3, #12
 80035de:	602b      	str	r3, [r5, #0]
 80035e0:	e7d4      	b.n	800358c <_free_r+0x24>
 80035e2:	6820      	ldr	r0, [r4, #0]
 80035e4:	1821      	adds	r1, r4, r0
 80035e6:	428b      	cmp	r3, r1
 80035e8:	bf01      	itttt	eq
 80035ea:	6819      	ldreq	r1, [r3, #0]
 80035ec:	685b      	ldreq	r3, [r3, #4]
 80035ee:	1809      	addeq	r1, r1, r0
 80035f0:	6021      	streq	r1, [r4, #0]
 80035f2:	6063      	str	r3, [r4, #4]
 80035f4:	6054      	str	r4, [r2, #4]
 80035f6:	e7c9      	b.n	800358c <_free_r+0x24>
 80035f8:	bd38      	pop	{r3, r4, r5, pc}
 80035fa:	bf00      	nop
 80035fc:	20000090 	.word	0x20000090

08003600 <_read_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4604      	mov	r4, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	2200      	movs	r2, #0
 800360a:	4d05      	ldr	r5, [pc, #20]	; (8003620 <_read_r+0x20>)
 800360c:	602a      	str	r2, [r5, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7fc ffa9 	bl	8000566 <_read>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_read_r+0x1e>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_read_r+0x1e>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	2000014c 	.word	0x2000014c

08003624 <_fstat_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	2300      	movs	r3, #0
 8003628:	4d06      	ldr	r5, [pc, #24]	; (8003644 <_fstat_r+0x20>)
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	f7fc ffdc 	bl	80005ee <_fstat>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d102      	bne.n	8003640 <_fstat_r+0x1c>
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	b103      	cbz	r3, 8003640 <_fstat_r+0x1c>
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	bd38      	pop	{r3, r4, r5, pc}
 8003642:	bf00      	nop
 8003644:	2000014c 	.word	0x2000014c

08003648 <_isatty_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	2300      	movs	r3, #0
 800364c:	4d05      	ldr	r5, [pc, #20]	; (8003664 <_isatty_r+0x1c>)
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	f7fc ffda 	bl	800060c <_isatty>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_isatty_r+0x1a>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_isatty_r+0x1a>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	2000014c 	.word	0x2000014c

08003668 <_init>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr

08003674 <_fini>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	bf00      	nop
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr
